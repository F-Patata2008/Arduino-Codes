/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 18.12.2024 14:51:08

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242592;
#else
constexpr int kTensorArenaSize = 241568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039099575951695442, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 16552, -37493, -19711, -20872, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<4, float> quant2_scale = { 4, { 0.00032436390756629407, 0.00015800133405718952, 0.0003036630223505199, 0.00029710782109759748, } };
const TfArray<4, int> quant2_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[4*1*1*32] = { 
  /* [0][0][][] */ 20,-15,-16,-34,75,-5,-33,-26,86,22,73,67,-50,-7,-15,41,10,21,-58,22,-18,52,-30,108,15,-5,4,110,127,-13,23,9, 
  /* [1][0][][] */ 54,76,-64,-26,-24,35,118,39,-30,-74,-68,31,104,-34,113,-127,121,-104,24,-33,32,-48,-63,-17,-12,-70,45,-110,-79,-116,-21,-43, 
  /* [2][0][][] */ -17,59,16,49,-6,1,43,27,-37,-127,47,-26,-60,55,-46,22,31,44,40,-26,4,21,-4,-16,24,-12,47,-85,-63,24,41,42, 
  /* [3][0][][] */ 40,-43,43,1,5,62,24,-4,9,-127,4,52,37,6,-65,-36,61,-43,60,11,-56,13,11,-15,51,7,-49,-1,-102,68,22,25, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 4,1,1,32 } };
const TfArray<4, float> quant3_scale = { 4, { 0.0063537186942994595, 0.0030949683859944344, 0.0059482250362634659, 0.0058198198676109314, } };
const TfArray<4, int> quant3_zero = { 4, { 0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { 36, 564, -1264, 589, -1714, -109, -33, 160, -1360, 1879, -2015, -639, 343, -1624, -1370, -359, 241, -720, 30, -1612, -1428, -1799, -1243, -194, 321, -1521, 844, 1471, 1114, 86, -293, 525, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.1004081392893568e-05, 4.9238227802561596e-05, 4.1846742533380166e-05, 6.1176047893241048e-05, 4.0963936044136062e-05, 4.6235629270086065e-05, 3.9978127460926771e-05, 4.6040018787607551e-05, 3.9148297219071537e-05, 7.430902769556269e-05, 4.0982173231896013e-05, 4.371235627331771e-05, 4.7004676162032411e-05, 4.5542372390627861e-05, 5.4884574637981132e-05, 5.2027953643118963e-05, 3.6129698855802417e-05, 4.8153437091968954e-05, 4.4779575546272099e-05, 4.1967494325945154e-05, 5.3407111408887431e-05, 4.2897758248727769e-05, 4.6227869461290538e-05, 5.6241118727484718e-05, 5.213500844547525e-05, 3.9338916394626722e-05, 4.0251692553283647e-05, 8.7498694483656436e-05, 0.00011203917529201135, 4.5070664782542735e-05, 3.1771673093317077e-05, 6.0375423345249146e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -52,-25,123,-8,127,4,-110,-80,54,-121,-78,15,66,0,-24,62,-54,-31,-72,-76,-72,-125,-39,112,-124,-19,106,-70,114,10,-14,-73,86,-73,-118,66,-111,-43,-89,95,113,-125,-127,116,59,-104,83,-24,-9,-91,-5,78,-56,-24,-87,93,17,92,107,-100,-67,109,-75,32,-1,21,94,105,66,93,68,-99,110,-120,53,94,-117,-15,-89,9,53,18,52,-96,-73,-47,-113,115,-1,101,-10,-105,19,92,62,17, 
  /* [1][0][][] */ -44,47,-36,6,-20,58,17,29,92,-59,-53,99,50,-12,32,61,68,-54,5,84,-10,17,27,-9,-9,22,-14,71,7,23,67,-34,53,69,6,24,57,40,12,-64,-20,-35,-7,-44,-15,44,-34,-57,-29,-73,76,-12,16,70,-48,-36,23,68,22,43,-20,89,-43,-64,-42,33,65,34,82,-4,24,22,-67,45,-19,45,74,-30,0,67,-48,53,-63,-127,17,96,-59,-12,69,74,72,20,69,65,38,0, 
  /* [2][0][][] */ 29,-8,-66,79,-63,-24,30,32,-58,16,-61,53,47,-12,44,-95,-16,-46,-3,39,-95,-11,64,-33,-51,19,76,-32,-97,35,21,53,-95,-38,-111,-114,-96,54,61,-41,-127,-93,22,-16,-70,96,-48,-27,56,5,28,-76,-77,11,25,3,-99,45,-70,-26,-8,22,-32,11,38,7,16,54,-103,102,18,-99,13,-68,11,3,-45,-41,-16,25,7,-84,-33,-61,6,-97,-46,-15,26,81,-12,-35,-87,-43,-69,-15, 
  /* [3][0][][] */ 55,-24,32,-7,-95,15,-102,21,63,-35,38,-33,51,76,43,24,34,30,-63,19,79,-26,-13,-84,-61,-111,-37,49,-33,-51,-4,-2,-86,-20,-47,-23,-57,-1,38,-14,-54,-123,-27,23,54,45,-37,-43,8,-20,-26,-4,49,-4,59,-46,-127,-79,-84,-52,-35,19,-27,-16,-3,-21,-34,-12,-17,-28,27,39,15,-42,47,-16,43,-3,81,-10,-48,-56,10,1,35,37,-48,-36,-43,41,11,-68,27,-41,-74,43, 
  /* [4][0][][] */ 60,54,-35,12,-48,-51,3,48,13,113,-39,79,-11,-61,-45,-83,-52,-26,-20,-16,55,-65,44,-1,-40,-22,18,-78,-68,-5,-82,-71,33,60,-17,-114,-74,-29,-127,78,-50,-75,-84,-106,-5,57,72,17,-5,-39,-38,-88,-101,1,-100,-11,27,-100,-1,6,-25,-95,-61,-78,-66,12,-34,-63,-14,-107,-111,-100,-77,22,50,12,18,-42,-36,-76,-26,-64,-93,-51,-27,26,40,-33,-125,-89,5,25,18,48,-110,-40, 
  /* [5][0][][] */ 61,-57,59,45,22,-71,-3,59,66,-127,15,-57,15,68,32,31,41,38,-86,56,22,26,-12,-32,-81,-96,3,-84,9,27,-2,-70,-61,-2,-80,-8,-96,-24,36,53,-59,-64,16,75,-19,27,-6,-40,-91,64,16,3,33,19,36,-35,32,43,-59,-12,32,-43,12,-77,-37,72,-10,23,52,-1,66,-48,-33,42,-14,-52,6,-78,-3,49,73,19,-19,26,-67,51,-26,30,24,-87,84,69,-25,36,51,-55, 
  /* [6][0][][] */ 5,-28,103,59,-59,-46,-23,85,-3,-83,25,-53,71,44,107,-88,33,-29,-18,75,-56,-100,57,32,-102,-84,11,-72,-39,-80,39,-56,-101,-107,-58,-86,4,39,-73,80,92,3,4,-3,-87,101,-90,-48,-96,5,-15,-89,60,-44,91,-50,1,0,-79,87,-65,9,45,-78,-51,56,100,-36,70,-12,-91,9,55,-67,-65,-26,-67,-127,-44,-29,28,-18,0,-68,-74,-73,-62,-53,61,78,84,21,-34,-34,73,-18, 
  /* [7][0][][] */ 75,70,-20,-35,-51,90,-29,23,111,-10,-53,32,41,-64,45,65,40,-13,-27,76,53,33,-15,36,-80,63,44,29,-67,92,-20,33,14,11,44,68,-65,59,8,-21,90,-101,58,66,42,15,51,-100,21,-55,-84,-103,-13,74,18,8,73,-64,-28,-48,21,4,52,-101,-59,-37,61,19,-73,5,49,72,66,-4,53,49,-37,24,-56,39,66,-34,-49,-127,54,32,-103,94,60,11,66,48,-35,-21,10,-46, 
  /* [8][0][][] */ 8,6,-71,-88,40,34,-68,-53,-19,75,12,55,-19,-54,-103,-92,-52,102,28,-5,-4,-52,41,96,-110,82,12,41,-75,-15,-83,99,69,-43,7,6,67,-12,-51,46,71,80,-116,-127,-32,-54,-3,84,31,-82,-65,77,-86,-43,-31,-114,75,70,-99,77,69,9,20,80,-48,-63,-52,67,-100,52,11,-34,36,59,-22,-7,-62,78,39,34,3,78,-94,-63,-1,12,45,-65,-3,-67,-99,61,-64,-35,-70,42, 
  /* [9][0][][] */ 52,23,50,49,62,-53,30,-48,12,56,32,22,3,6,-41,-24,0,63,16,-11,14,68,-3,-32,94,39,-16,22,20,-28,6,71,56,44,38,23,-32,40,5,-30,44,72,18,-60,28,-11,-23,82,52,49,28,63,47,-40,-31,68,77,-22,79,28,-53,39,98,25,-1,13,49,32,-4,59,89,-10,4,81,-49,-29,-56,-29,17,38,39,41,127,104,-25,-33,94,-48,85,26,-9,53,68,-6,91,-2, 
  /* [10][0][][] */ -87,34,35,-66,-44,55,55,-15,19,-10,-17,-91,44,31,-64,-30,-62,37,-107,-83,-54,-11,12,-83,-7,11,-127,-124,-75,30,-110,-103,34,46,61,30,-64,-5,-65,0,-64,59,-70,-63,-109,-87,-28,-80,-26,-9,-3,1,13,-18,-85,-66,-116,-46,-8,-73,-35,33,59,1,64,-95,-117,-54,-18,12,-109,-91,33,44,-106,50,-44,27,16,-18,25,-24,11,60,-115,19,53,-22,-9,-35,-44,-92,-80,-77,-70,-52, 
  /* [11][0][][] */ 75,12,-23,59,75,33,21,2,67,46,-63,72,-16,-74,11,-63,-54,-93,38,11,0,49,-5,-108,-127,-83,-25,40,47,-17,8,-16,-80,-64,27,35,-73,42,-35,-56,-30,33,-81,-8,-40,-65,-96,-88,12,49,91,11,-90,-78,4,6,-65,-55,-60,-80,-84,58,51,-14,12,55,-55,12,58,20,-77,-67,19,71,-87,25,-63,-12,-57,44,-105,-18,-86,-92,23,-77,-13,-46,-93,-36,-3,-93,-76,-35,-59,-54, 
  /* [12][0][][] */ 1,76,-21,-8,96,29,-31,68,-54,35,21,57,-13,-9,61,-47,-46,-21,-43,-67,37,-13,-6,71,-73,-34,97,-75,85,32,-5,106,-53,-45,-23,25,26,-33,11,102,127,1,-90,-17,-8,-49,-39,51,-30,-104,-9,41,57,41,-36,47,-4,-7,29,68,61,110,-11,36,100,40,-4,93,62,60,6,92,70,55,5,8,-26,29,-84,-86,-38,67,-1,-43,-28,32,32,91,-71,-87,66,59,101,-5,61,31, 
  /* [13][0][][] */ 51,-75,44,35,39,50,31,17,69,-100,-25,-56,36,25,18,-50,-126,-80,-92,4,17,-42,50,-57,-83,-2,-21,-16,-97,-93,26,-7,-1,45,-49,6,-91,-27,-15,25,-80,27,-48,-9,-54,55,-31,-55,16,69,-59,-54,-106,-15,62,-92,-63,-10,-52,-84,2,58,-88,-21,-74,-77,-92,42,-61,-18,76,-37,-91,-2,-78,-60,-66,36,29,-11,7,-82,43,-19,-66,-110,37,127,-39,-37,-48,9,60,-16,9,29, 
  /* [14][0][][] */ -73,-44,43,29,61,-10,-34,-14,-79,-28,43,86,-18,-82,-51,-73,-30,-95,-24,-10,-46,-8,-27,55,-87,-36,9,-31,-80,-43,-31,8,68,-64,-7,-21,88,75,46,-21,16,-81,-14,29,4,-104,80,-98,45,-10,52,12,73,1,-19,7,-47,52,39,47,-32,-25,-12,44,-35,-13,64,-99,-59,-42,-82,81,41,63,21,-61,-16,-76,7,-15,21,-50,-65,-54,-127,-89,-63,57,65,-27,27,2,41,28,-2,15, 
  /* [15][0][][] */ 41,-37,-22,96,57,-52,45,-92,49,22,-56,14,70,9,-69,-87,66,3,-14,31,14,20,33,76,41,45,16,43,5,16,49,-43,4,2,-57,6,-69,108,49,-38,22,84,30,-28,13,-53,-5,-35,-21,-4,-7,84,-80,-93,-15,17,59,35,-42,83,11,-51,-17,71,-36,50,-67,1,-52,90,58,-69,5,29,29,-71,-9,27,47,83,-53,104,-63,-1,-59,-40,-54,45,26,26,-64,-22,52,81,-84,127, 
  /* [16][0][][] */ -71,27,106,-64,48,118,-62,72,50,19,-71,81,-6,-41,-30,-42,101,59,34,49,114,75,-56,35,-45,25,-37,44,-103,33,35,22,-105,69,42,46,-25,56,-29,-26,45,-81,52,99,68,114,66,-22,-66,-108,12,61,-22,127,77,25,-1,96,32,23,127,115,19,41,47,20,-14,93,50,85,-31,9,38,68,72,88,-4,67,-96,-18,18,-81,12,-50,1,93,78,31,67,4,-8,114,67,-2,-62,31, 
  /* [17][0][][] */ 50,-98,-3,48,-45,-94,-6,-110,15,-33,53,48,63,46,-107,6,-3,25,78,70,-85,-9,5,-34,7,46,-78,-3,54,-73,-36,50,-2,-22,10,-2,-49,102,-78,1,-70,64,-23,-25,-15,-13,78,-83,37,127,-24,107,-33,15,46,-38,-86,40,-42,-30,3,-92,38,71,-71,-78,-7,-100,-99,-17,77,-1,-6,-11,-61,21,61,-37,13,-57,-4,-13,-48,-79,-81,30,62,-46,0,34,-94,-55,7,36,-7,17, 
  /* [18][0][][] */ -71,67,83,-65,-27,-79,-89,9,13,24,-72,-71,-30,30,48,-32,0,-12,10,-20,79,-42,5,-70,-3,-118,1,67,-20,31,-27,26,11,-19,-127,-102,-27,24,-20,51,-43,-26,-35,7,-73,34,-6,-5,7,-40,33,22,-84,-12,14,48,-85,20,-21,-70,72,86,3,-2,-73,-86,-22,70,46,-55,-46,71,-67,-63,-56,-74,53,1,6,-54,-53,-13,-48,-89,73,-16,22,66,-99,-50,-39,76,44,-23,17,-5, 
  /* [19][0][][] */ -13,-2,32,7,18,-33,47,41,45,-9,-6,-40,-104,1,-73,20,42,-91,127,21,-43,37,-68,-16,39,-81,-4,-76,-94,-119,-82,4,37,-95,5,-25,-15,-80,-71,-106,5,-116,-88,-19,-91,-4,107,-96,-2,0,-55,63,-54,-19,-16,-21,-5,50,-25,-52,18,-74,60,20,-80,-28,-50,-30,-32,23,33,-68,-74,-120,-71,-89,-43,-86,-13,57,20,-116,-40,32,-95,-32,-22,-30,45,-3,-30,21,-56,57,29,-64, 
  /* [20][0][][] */ -22,67,13,40,-34,40,7,12,-19,78,-67,53,-29,34,0,-74,-46,-7,9,-44,-11,-32,-68,-64,31,14,-98,6,13,-16,-2,59,127,10,-14,21,45,-42,-34,-95,-1,-35,-76,-95,-44,-69,5,38,82,-95,-56,21,5,95,5,-18,114,19,84,42,40,-59,-38,-26,-35,-64,-57,-19,-76,-70,-67,46,-66,-72,-12,-13,42,106,46,41,30,-15,36,-21,10,40,-14,11,-6,34,-14,30,42,-18,-14,-20, 
  /* [21][0][][] */ 48,29,16,-111,46,-73,27,-20,32,3,-90,15,-23,-2,-64,-107,-108,-48,75,-38,51,11,22,-90,13,-89,-53,29,-12,-27,-37,-47,-18,-11,-93,-108,57,66,-127,-52,-37,-32,4,-40,-102,-100,-7,47,-44,-60,-39,57,-7,26,-103,66,-67,12,-73,62,12,-87,-20,-42,30,-2,-63,-84,-110,-15,17,26,6,-25,20,17,-113,-44,17,44,-24,93,16,-87,12,-109,20,-74,-117,21,44,-119,-61,-21,21,-20, 
  /* [22][0][][] */ 82,-62,-76,-90,42,-61,58,62,-91,119,-77,-56,62,-95,-105,-85,8,52,-66,-66,40,-6,1,2,44,-13,-106,49,-65,-80,-69,-101,17,24,-6,-12,-21,-30,-66,-106,35,-32,-21,45,17,-107,127,-39,1,-49,-20,-20,-70,-57,-56,29,-30,-44,-34,-45,55,-78,-79,-103,-71,-9,-105,-54,57,54,-36,-25,-69,9,24,-89,9,-20,23,46,54,-89,-8,-80,41,38,67,-47,-63,0,-69,22,1,-8,-45,52, 
  /* [23][0][][] */ 121,-66,-13,34,64,-65,57,-100,5,39,42,36,30,-39,-5,-43,39,14,31,58,34,-17,57,-2,-14,70,27,-2,48,6,77,5,43,75,34,24,58,17,-77,10,-36,22,-11,-87,-51,-79,127,18,50,-19,-56,35,36,-68,-33,112,-28,-17,124,19,-93,-63,-17,39,19,10,-82,-66,24,-8,75,-46,38,46,-36,-70,5,12,42,56,-42,-30,84,-50,64,-11,103,-47,-51,10,52,10,113,-67,-32,46, 
  /* [24][0][][] */ -48,-47,-58,-54,-63,-63,-53,-47,54,24,68,-9,76,47,-17,-60,-58,24,-25,-35,69,-52,-41,-28,24,-78,65,29,36,43,-21,-38,-47,8,-3,12,-40,-52,47,6,-65,-79,69,19,26,-2,3,55,-73,-38,-43,19,52,29,58,-58,-55,54,3,40,75,5,18,34,-77,67,-21,-48,-64,39,-29,-22,-19,2,74,71,55,-107,-61,-48,-52,-55,-78,-127,5,47,-37,-49,0,-66,15,-45,-23,40,-73,32, 
  /* [25][0][][] */ -102,-76,-95,-37,50,-90,-115,17,11,-123,-61,-8,32,-30,-122,-47,-90,23,49,-121,29,43,-38,-77,-16,-73,-116,4,36,-105,5,69,50,-122,8,33,55,-80,-48,-44,-99,54,-118,-26,55,7,93,3,-77,49,-88,43,9,-45,-82,-20,-45,15,-119,35,72,8,16,10,-28,36,-43,-34,-105,-33,-49,-125,1,-124,32,-9,32,35,-16,-11,14,14,-68,50,-92,-69,-115,-105,-48,-61,60,-9,-127,-39,-45,-98, 
  /* [26][0][][] */ 32,-62,-1,-8,-67,-32,-24,14,-51,-89,110,108,-57,-46,26,9,75,-10,-88,-55,42,80,97,-17,-8,82,23,46,4,30,-71,-3,-1,-52,-60,-71,-19,70,-13,31,-53,40,40,54,-67,80,-53,46,-26,-5,1,42,23,-27,-14,-101,99,48,35,-8,13,-68,61,-28,96,-3,-31,44,-67,35,83,104,76,-97,-54,26,60,-77,-36,24,-12,42,33,-109,53,26,-53,51,-33,127,9,17,-33,90,70,62, 
  /* [27][0][][] */ 23,39,-24,-17,-12,-26,32,-19,10,49,40,-51,-11,36,19,-15,22,40,66,-5,-48,-4,5,48,42,36,-54,35,38,4,29,12,44,52,-32,-4,-12,9,-52,30,-42,127,-3,8,53,-11,53,121,52,47,62,28,-17,-36,-6,0,57,1,25,3,-35,-23,14,85,61,-5,-45,46,19,16,-29,7,26,74,-7,-27,27,11,25,30,66,23,122,49,-35,-26,28,-12,13,-10,-16,-9,24,-20,48,39, 
  /* [28][0][][] */ 51,34,21,39,-20,2,29,-42,-13,-10,26,6,-26,10,-11,32,14,88,23,54,-14,-7,8,6,52,48,-37,4,-13,-31,36,-8,-9,26,34,32,33,-12,-14,0,22,127,-5,13,-16,-6,38,59,29,35,35,52,-21,-9,14,33,19,-10,88,7,-18,-22,12,77,47,21,-17,27,-27,27,3,-8,23,57,0,-26,-33,20,-12,23,-5,-9,103,67,24,-22,81,-42,-2,23,-5,-27,-24,-3,-4,11, 
  /* [29][0][][] */ 45,9,50,-22,-96,47,-114,-27,104,-54,-89,-116,79,-55,-32,-9,-24,72,33,-19,-49,-19,39,-9,-54,-33,-14,-29,-117,-13,45,8,4,5,-99,-39,-38,88,-16,84,15,63,6,77,25,123,-56,34,11,2,-1,-31,26,-90,108,38,-96,39,-45,78,-44,70,-62,-72,-72,-50,46,85,68,-16,52,-84,81,57,57,26,127,-92,-31,59,-18,-10,-32,-86,88,90,8,92,-68,83,91,46,-110,55,-32,89, 
  /* [30][0][][] */ 24,-67,-68,31,-105,24,-68,-14,120,-20,0,-42,-111,11,60,11,-3,38,94,-111,42,-105,-117,13,-117,20,-73,120,-14,-113,-98,6,-89,-80,-127,-61,15,-19,-5,26,94,-80,-15,100,106,-47,101,63,-74,73,17,-109,98,-52,-13,103,-84,-60,-85,-57,-109,-4,-76,-31,-117,-92,-100,89,-67,110,45,-37,-102,112,38,-91,-62,-74,-79,-67,26,24,-110,-23,-113,32,-114,112,-40,-121,74,54,-37,-4,8,-76, 
  /* [31][0][][] */ 58,-79,33,56,-21,41,-58,-55,11,-59,-53,-95,55,-47,-23,83,-42,-62,-13,37,50,30,0,32,-27,-114,31,19,-81,-37,-26,56,-43,11,-85,-25,38,-2,-23,-66,6,-73,4,40,21,-1,-32,27,14,35,-1,-11,-62,-50,-29,16,-127,36,-8,46,-1,1,44,-78,2,62,-18,-30,45,-51,-45,-11,-47,-19,20,16,-9,-82,51,70,-41,-17,26,10,49,63,-71,36,3,-10,-28,-38,-20,77,-17,7, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017023314721882343, 0.0027035081293433905, 0.0022976661566644907, 0.0033589741215109825, 0.0022491940762847662, 0.0025386454071849585, 0.0021950665395706892, 0.0025279049295932055, 0.0021495034452527761, 0.0040800627321004868, 0.0022501954808831215, 0.0024001006968319416, 0.0025808711070567369, 0.0025005808565765619, 0.0030135302804410458, 0.0028566827531903982, 0.0019837622530758381, 0.0026439458597451448, 0.0024586983490735292, 0.0023042962420731783, 0.0029324076604098082, 0.0023553739301860332, 0.0025382193271070719, 0.0030880137346684933, 0.0028625607956200838, 0.0021599696483463049, 0.0022100871428847313, 0.0048042638227343559, 0.0061517003923654556, 0.0024746810086071491, 0.0017444774275645614, 0.0033150145318359137, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 1033, -648, 4603, 8287, 6256, -3304, 5078, -2065, -2847, -1152, 6603, -3461, 4721, 7072, 2602, 3969, -1122, -966, -1870, 6296, 3023, -871, 3727, -798, -971, 5939, 1463, 2988, 9073, 3960, 4230, 1449, 1974, 5420, 5292, 5883, -580, 4766, 3759, -6039, 102, 1368, 19, 2313, -1856, 718, -1321, 777, -7944, 2244, 1752, -3853, 6662, -1401, 2244, 1491, 2370, 2543, -554, -3885, -144, 2225, 536, 5443, 7643, 4471, 4540, 6833, 6544, -1311, 3684, 6880, 2851, -1898, 4900, 9579, 602, -3854, 558, 803, 10231, 1669, 193, -1908, 1551, 681, 2032, -4182, 4667, -1086, 4740, 1261, 413, -4581, -124, 1540, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00014204313629306853, 0.00019033921125810593, 0.00012099673767806962, 8.3349259512033314e-05, 0.00010038786422228441, 0.0001567924628034234, 0.00010780247976072133, 0.00012983279884792864, 0.0001378716406179592, 0.00017155690875370055, 9.1424270067363977e-05, 0.00012191954010631889, 0.00010897190077230334, 6.640394713031128e-05, 0.00011471869947854429, 0.00010794112313305959, 0.00018136267317458987, 0.00014005685807205737, 0.00013688036415260285, 9.5811206847429276e-05, 0.00013865863729733974, 0.00017214157560374588, 7.549838483100757e-05, 0.00013608999142888933, 0.00020036038768012077, 0.0001212556817336008, 0.00017294618010055274, 0.00010866631055250764, 8.695183350937441e-05, 8.2869548350572586e-05, 0.00011597967386478558, 0.00012562323536258191, 0.00015018701378721744, 0.0001154645360657014, 0.00012205901293782517, 8.1085330748464912e-05, 0.00015291474119294435, 0.00010472854046383873, 8.0955964222084731e-05, 9.6738593128975481e-05, 0.00015159332542680204, 0.00015613317373208702, 0.00015508766227867454, 0.00011869459558511153, 0.00015395331138279289, 0.00012992307893000543, 0.00019583404355216771, 0.00016380943998228759, 8.3666483988054097e-05, 0.00010394241689937189, 0.00012296474596951157, 0.00013204361312091351, 9.9891418358311057e-05, 0.00013490351557265967, 0.00015123556659091264, 0.00015530528617091477, 0.00011625718616414815, 0.00013910053530707955, 0.00021550433302763849, 8.7595552031416446e-05, 0.00012631763820536435, 0.00011744470248231664, 0.00011318999895593151, 0.00012900365982204676, 9.0980523964390159e-05, 0.00010186964937020093, 8.7934342445805669e-05, 0.0001059590358636342, 0.00010208375897491351, 0.00013641349505633116, 0.00013445243530441076, 0.00010356462735217065, 0.00014880861272104084, 0.00012288463767617941, 0.00013099376519676298, 7.9759214713703841e-05, 0.00011816109326900914, 0.00015284183609765023, 0.00011573884694371372, 0.00013784941984340549, 7.46711521060206e-05, 0.00011473858467070386, 0.00013791033416055143, 0.00017232424579560757, 0.00015342365077231079, 0.00016827159561216831, 0.00013100063370075077, 0.00010531234875088558, 0.00013013894204050303, 0.0001030568455462344, 0.00012243112723808736, 0.00017330374976154417, 0.00010305434989277273, 0.00010811337415361777, 0.0001478229823987931, 0.00014623536844737828, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ 12,66,-86,51,51,-44,93,66,-28,29,7,-74,81,127,-36,-8, 
  /* [1][0][][] */ 5,14,-35,-20,-24,64,20,-127,0,-17,-15,-47,10,-15,-32,-2, 
  /* [2][0][][] */ -14,-9,18,59,30,14,-105,127,-11,-9,74,-42,-34,-67,-45,75, 
  /* [3][0][][] */ 127,-65,94,4,-19,-22,-9,120,-54,83,46,32,1,91,36,6, 
  /* [4][0][][] */ -20,44,12,17,-75,-16,-50,-85,-36,-4,51,-8,31,34,80,127, 
  /* [5][0][][] */ 116,29,12,-17,-81,35,30,39,14,4,42,62,127,12,-73,-19, 
  /* [6][0][][] */ 26,-77,-32,-35,-35,-4,-54,-35,-8,-33,-32,2,112,64,127,-44, 
  /* [7][0][][] */ -47,45,-14,-83,4,-39,-79,9,-102,45,-68,-61,-127,-33,24,90, 
  /* [8][0][][] */ 42,34,50,11,64,18,59,20,73,-44,37,17,-127,-26,-62,15, 
  /* [9][0][][] */ -2,49,-4,-19,-17,-21,37,-18,-4,40,-49,31,18,127,30,4, 
  /* [10][0][][] */ 101,20,-17,67,-45,-31,44,-73,-79,-7,-79,-127,-92,-46,31,79, 
  /* [11][0][][] */ 58,5,124,-16,-56,-35,-20,108,-127,43,-32,-12,-12,1,61,111, 
  /* [12][0][][] */ -35,-5,-24,1,59,-18,127,69,-52,19,8,11,-46,91,-47,114, 
  /* [13][0][][] */ 57,87,60,92,62,83,127,62,-89,115,-108,-83,7,104,-51,-29, 
  /* [14][0][][] */ -104,127,10,-31,-9,-7,43,-18,-23,8,86,-9,-107,3,-40,70, 
  /* [15][0][][] */ -29,-45,-127,-33,71,-28,-80,-56,19,-32,-41,-84,5,-99,-71,22, 
  /* [16][0][][] */ 127,6,42,-13,13,-21,53,-36,-38,24,92,30,47,8,-29,13, 
  /* [17][0][][] */ 39,31,-59,-101,-12,-71,115,-127,2,-15,-68,40,39,94,19,47, 
  /* [18][0][][] */ 16,114,-50,-37,45,-68,-10,-38,-18,127,-21,-2,-40,32,-23,-27, 
  /* [19][0][][] */ -59,-83,78,-67,41,-127,19,-18,68,21,54,82,-2,-15,46,-20, 
  /* [20][0][][] */ -17,104,33,0,15,-4,18,-14,49,-25,77,-17,-127,-27,-62,1, 
  /* [21][0][][] */ -54,67,41,28,35,59,59,39,-127,57,-44,5,-31,21,-57,-43, 
  /* [22][0][][] */ 26,-79,43,19,30,-127,98,12,44,-44,-44,-59,11,-89,-38,-60, 
  /* [23][0][][] */ -62,-78,41,53,26,-28,12,-38,-1,-34,81,3,4,62,68,127, 
  /* [24][0][][] */ 8,3,35,62,44,-12,-75,-127,58,15,-47,11,-19,-24,-24,-31, 
  /* [25][0][][] */ -15,37,36,-61,-39,9,-31,-20,-34,78,0,13,47,127,17,3, 
  /* [26][0][][] */ -48,72,-6,14,26,-67,-1,-21,-9,4,34,72,24,4,-68,127, 
  /* [27][0][][] */ -27,-127,-53,2,-54,101,8,-56,39,-49,45,-31,17,-55,-105,-19, 
  /* [28][0][][] */ -35,39,60,71,3,29,-29,-127,-121,45,90,-27,59,-12,-39,-10, 
  /* [29][0][][] */ -125,127,-32,-18,-28,28,-102,-76,-76,-49,23,12,-5,-67,-114,75, 
  /* [30][0][][] */ 85,84,-72,82,-86,-100,-72,-6,-9,-10,-1,-92,127,44,6,78, 
  /* [31][0][][] */ 127,43,-38,-25,-79,39,108,14,-63,3,44,30,41,38,-9,15, 
  /* [32][0][][] */ -24,-46,127,35,-7,36,55,20,10,11,-29,17,13,82,71,10, 
  /* [33][0][][] */ -41,-49,-63,-20,-1,45,127,28,28,-4,-13,-65,93,113,-22,8, 
  /* [34][0][][] */ -84,-19,127,-7,-8,-32,67,-26,-124,49,47,-58,64,33,-41,-31, 
  /* [35][0][][] */ -2,76,-33,5,-108,127,-36,-43,-42,106,5,72,-57,46,14,54, 
  /* [36][0][][] */ -17,-83,127,-57,-52,11,-52,-9,18,28,-53,73,20,-64,-38,42, 
  /* [37][0][][] */ 57,9,49,-36,127,-80,-58,45,-20,86,-56,24,-115,-57,90,-4, 
  /* [38][0][][] */ 48,4,15,-75,21,-66,-78,40,-41,46,-78,-16,-65,-97,-127,23, 
  /* [39][0][][] */ -91,9,-125,-33,-88,-110,67,36,-127,-50,30,118,63,-2,-7,112, 
  /* [40][0][][] */ 85,72,22,-127,-58,9,-6,4,-72,-41,-8,-53,13,18,3,83, 
  /* [41][0][][] */ 95,-116,-31,-33,-5,11,-105,-16,45,1,50,-67,127,-50,82,-49, 
  /* [42][0][][] */ -21,-84,-41,127,17,-102,-101,11,37,-2,-7,63,-111,68,-73,-11, 
  /* [43][0][][] */ -63,-17,-67,-88,-26,-25,8,81,37,-127,-21,44,-43,-24,-33,86, 
  /* [44][0][][] */ -56,1,21,-21,-34,21,55,78,66,-58,67,57,127,50,-22,13, 
  /* [45][0][][] */ 5,62,-94,71,127,-64,-29,-33,116,-95,67,-32,-59,-5,-63,51, 
  /* [46][0][][] */ -26,-36,25,-4,57,-30,-5,9,-11,107,-34,-127,32,22,-32,53, 
  /* [47][0][][] */ 69,-38,-9,-3,41,-18,-47,-58,-5,127,-38,7,16,-87,-46,-8, 
  /* [48][0][][] */ 32,16,-30,-123,16,-55,116,-127,1,24,-63,16,54,72,20,35, 
  /* [49][0][][] */ 9,89,-44,74,41,-127,50,43,0,53,48,-64,-14,103,117,-120, 
  /* [50][0][][] */ 25,33,-37,8,-127,-18,-89,-58,81,71,28,41,-47,-48,5,28, 
  /* [51][0][][] */ 127,-18,-23,3,-48,80,-73,-49,38,0,-52,41,-39,-63,13,11, 
  /* [52][0][][] */ -36,7,127,39,-68,-69,-116,-17,-93,-39,-26,-85,-11,-44,6,121, 
  /* [53][0][][] */ 16,115,87,-127,-11,87,65,-21,-48,-21,-5,-47,64,-99,2,73, 
  /* [54][0][][] */ 28,120,-23,-12,19,-101,-68,57,23,-39,-39,127,50,70,9,56, 
  /* [55][0][][] */ -25,-25,44,34,31,-28,104,64,-63,-2,4,2,127,48,-2,-19, 
  /* [56][0][][] */ 127,44,35,4,-64,109,-67,-51,-39,34,-76,1,-78,83,-40,55, 
  /* [57][0][][] */ -32,-23,-69,-43,-55,-113,49,-8,-127,-37,68,79,5,38,-5,71, 
  /* [58][0][][] */ 35,-49,54,43,-19,-25,2,-9,19,-12,-127,-44,27,-35,-24,39, 
  /* [59][0][][] */ 108,45,-98,85,-5,33,56,-58,-104,-29,30,-120,-116,-37,44,127, 
  /* [60][0][][] */ 4,68,0,8,-30,-40,-9,-11,-54,-97,66,104,-42,-127,-31,27, 
  /* [61][0][][] */ -25,49,49,-104,-40,3,16,114,-7,-108,73,90,53,-22,-11,127, 
  /* [62][0][][] */ 92,71,-2,-127,-29,-2,7,-49,-11,42,-43,42,9,-25,-85,-88, 
  /* [63][0][][] */ 12,-52,-35,-7,-42,-81,-78,25,-29,-7,-31,-2,127,-3,42,-4, 
  /* [64][0][][] */ 8,24,15,57,-127,-39,-30,-72,36,113,43,-7,6,-71,-31,94, 
  /* [65][0][][] */ -20,42,-17,-24,-78,65,7,-17,20,-118,127,-62,57,62,-117,78, 
  /* [66][0][][] */ -97,112,-55,-90,19,-25,-100,-54,-112,85,74,-21,-127,-62,28,83, 
  /* [67][0][][] */ 4,-15,-127,-103,67,69,10,-21,-27,-12,64,-4,16,29,13,55, 
  /* [68][0][][] */ 36,45,-27,-44,-52,14,10,46,-52,45,127,1,-32,-54,-109,9, 
  /* [69][0][][] */ 64,-91,55,-25,2,-116,-35,127,-4,74,91,72,-8,58,-14,-8, 
  /* [70][0][][] */ 22,36,81,40,55,47,127,8,-17,18,-40,22,-73,22,-33,13, 
  /* [71][0][][] */ -8,38,103,-86,-127,-68,16,7,-28,-25,14,-108,-91,-7,2,45, 
  /* [72][0][][] */ -36,-87,7,-112,76,-30,-4,57,-96,24,-99,-3,54,113,-51,127, 
  /* [73][0][][] */ 33,20,38,5,127,-106,-36,12,-49,88,-97,19,-92,-66,112,-16, 
  /* [74][0][][] */ -37,10,-127,-25,72,-50,-14,36,-68,-12,-61,-7,-28,-10,-34,56, 
  /* [75][0][][] */ 93,-1,55,-55,35,16,-115,-22,-16,-127,94,13,-40,-42,-18,6, 
  /* [76][0][][] */ -11,-38,-56,65,42,42,71,-35,103,-127,24,75,-9,-67,-65,30, 
  /* [77][0][][] */ -33,-64,99,-18,42,-33,-29,-127,72,-20,19,123,41,17,-10,-30, 
  /* [78][0][][] */ -43,-47,32,-48,8,-48,32,-13,36,9,3,-97,-62,-29,-127,-78, 
  /* [79][0][][] */ -62,-67,8,20,127,37,5,10,65,39,-43,17,-43,-26,-37,-46, 
  /* [80][0][][] */ 33,-61,74,127,-56,-53,-126,48,-24,56,53,-22,-44,-15,8,63, 
  /* [81][0][][] */ 127,92,21,71,-34,47,9,87,-15,34,85,24,120,33,76,-9, 
  /* [82][0][][] */ -40,45,26,-22,-4,-91,-127,-103,-2,81,-44,-53,-23,78,-63,-28, 
  /* [83][0][][] */ 77,-49,85,2,-51,-3,-127,-27,20,-89,11,-74,5,29,45,-55, 
  /* [84][0][][] */ 3,-49,-101,8,127,32,46,34,-54,-13,-106,-10,11,-56,-80,5, 
  /* [85][0][][] */ -7,107,-2,-43,101,-1,44,-78,127,-67,49,6,37,-87,-12,9, 
  /* [86][0][][] */ 127,-20,102,50,-6,-46,75,26,-47,-29,-90,-32,37,23,-40,-14, 
  /* [87][0][][] */ 16,28,23,-81,59,-58,-43,8,14,-51,90,-41,-70,-127,-1,49, 
  /* [88][0][][] */ -49,-14,52,1,18,23,-69,-50,-16,10,-66,-127,-64,-37,-17,-14, 
  /* [89][0][][] */ -70,13,20,-79,41,15,-88,27,127,14,-89,-9,-56,-98,-41,-34, 
  /* [90][0][][] */ -13,18,-28,-116,127,32,-76,39,15,38,36,-14,15,3,-80,16, 
  /* [91][0][][] */ -16,-11,17,24,-43,-24,-7,50,-52,-52,44,-37,-19,44,7,127, 
  /* [92][0][][] */ -45,121,31,-26,-35,66,-108,62,-55,-20,62,-1,-53,127,50,51, 
  /* [93][0][][] */ -23,63,-24,-81,43,81,-65,-17,54,45,47,32,-127,19,-36,73, 
  /* [94][0][][] */ 15,112,121,-8,-127,-31,-4,-4,23,-18,33,-22,-52,-38,-11,-4, 
  /* [95][0][][] */ 33,72,74,4,99,12,-100,44,-19,32,-92,65,12,25,127,-15, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0020286454819142818, 0.0027184050995856524, 0.0017280629836022854, 0.0011903855483978987, 0.0014337291941046715, 0.00223929388448596, 0.0015396239468827844, 0.0018542587058618665, 0.001969068543985486, 0.0024501581210643053, 0.0013057120377197862, 0.0017412423621863127, 0.0015563254710286856, 0.00094837439246475697, 0.001638400717638433, 0.0015416040550917387, 0.002590202959254384, 0.002000277629122138, 0.0019549112766981125, 0.0013683658326044679, 0.0019803084433078766, 0.0024585083592683077, 0.0010782601311802864, 0.0019436231814324856, 0.0028615265619009733, 0.0017317611491307616, 0.0024699994828552008, 0.0015519610606133938, 0.0012418371625244617, 0.0011835343902930617, 0.0016564098186790943, 0.0017941381083801389, 0.0021449555642902851, 0.0016490526031702757, 0.0017432342283427715, 0.0011580523569136858, 0.0021839125547558069, 0.0014957222156226635, 0.0011562047293409705, 0.0013816106365993619, 0.0021650402341037989, 0.0022298779804259539, 0.0022149460855871439, 0.0016951840370893478, 0.0021987452637404203, 0.0018555481219664216, 0.0027968815993517637, 0.0023395095486193895, 0.0011949160834774375, 0.0014844948891550303, 0.001756169949658215, 0.0018858332186937332, 0.001426638918928802, 0.0019266781164333224, 0.0021599307656288147, 0.0022180541418492794, 0.0016603731783106923, 0.0019866195507347584, 0.0030778106302022934, 0.0012510307133197784, 0.0018040555296465755, 0.0016773331444710493, 0.001616567955352366, 0.0018424170557409525, 0.0012993745040148497, 0.0014548918697983027, 0.0012558692833408713, 0.0015132960397750139, 0.0014579497510567307, 0.0019482435891404748, 0.0019202358089387417, 0.0014790993882343173, 0.0021252692677080631, 0.0017550257034599781, 0.0018708395073190331, 0.0011391128646209836, 0.0016875645378604531, 0.0021828713361173868, 0.0016529703279957175, 0.0019687511958181858, 0.0010664457222446799, 0.0016386846546083689, 0.0019696212839335203, 0.0024611172266304493, 0.0021911808289587498, 0.0024032376240938902, 0.0018709375290200114, 0.0015040601138025522, 0.0018586309161037207, 0.0014718472957611084, 0.0017485488206148148, 0.0024751063901931047, 0.0014718116726726294, 0.0015440641436725855, 0.0021111925598233938, 0.0020885185804218054, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -5966, 20592, -2919, -8240, 7849, -5360, -13210, 4506, 21538, -11840, 6027, 15574, -24357, 7179, -11801, 21839, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 3.2543415727559477e-05, 5.0978535000467673e-05, 5.6867225794121623e-05, 6.2115352193359286e-05, 6.1115591961424798e-05, 6.4557687437627465e-05, 5.8272849855711684e-05, 5.7654269767226651e-05, 7.0949543442111462e-05, 6.5050306147895753e-05, 5.4523370636161417e-05, 4.8934569349512458e-05, 5.4979896958684549e-05, 5.2354665967868641e-05, 5.6926615798147395e-05, 7.6046475442126393e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -77,75,78,3,-26,10,-64,16,-45,33,0,-17,52,42,33,-10,11,-2,49,37,32,-53,127,85,67,37,26,50,-31,-118,-67,3,-37,-33,11,24,20,26,14,3,5,24,-30,-27,-98,-7,42,87,9,38,-30,5,-38,0,33,-16,-24,27,17,37,12,29,-14,16,-15,-49,-32,-16,-19,-39,23,0,36,31,-56,-5,-25,56,-78,-17,-20,98,88,-76,-1,72,22,77,62,16,20,-49,-14,-28,-84,-20, 
  /* [1][0][][] */ 59,-2,39,-38,-92,-16,9,0,15,-15,44,-26,16,-14,-52,-71,-10,-15,-54,39,-26,-59,15,5,-13,-45,6,-45,28,-71,64,-65,52,57,-40,62,13,80,-6,6,58,-20,-80,2,33,70,-107,-59,-78,-75,-37,-40,50,-30,-67,27,-74,-78,-50,71,37,21,-27,-46,-68,-49,-115,43,-18,3,-127,-25,-57,-58,-5,-69,26,-66,40,-79,-72,2,-85,-40,46,-25,-21,30,-93,-54,-66,115,53,33,-43,48, 
  /* [2][0][][] */ 78,-18,29,36,73,-69,40,16,-7,-5,-17,-38,-57,-26,18,-17,-100,-55,-61,20,-11,-48,-54,54,-18,-72,7,-37,-14,29,-44,127,-68,107,-33,1,-4,-43,-29,-17,-60,95,97,23,-62,11,-20,-30,64,-19,-21,-50,23,-35,-16,73,6,-10,46,-23,0,16,-51,-21,103,23,11,-61,15,22,10,-1,25,64,52,27,52,-18,34,24,81,-18,-47,25,-56,-8,15,78,11,-1,-23,38,-33,68,-55,44, 
  /* [3][0][][] */ 10,10,-8,6,39,5,1,-35,-28,61,33,54,16,0,-48,64,8,-24,3,12,31,89,41,-9,25,26,-13,10,65,-44,62,-24,-10,17,-2,-13,30,49,33,-15,-79,-7,11,6,-35,27,20,5,-1,-20,2,1,36,-52,-9,-33,56,127,-14,-44,-26,2,-18,3,48,68,-2,4,0,14,20,-43,-10,-21,42,6,1,51,-39,-6,17,-10,-23,-8,-16,-13,34,-30,13,51,24,-60,16,19,-27,37, 
  /* [4][0][][] */ 24,-19,-61,21,-50,21,-51,-12,-27,66,85,-32,-18,-9,2,-54,40,0,-32,29,37,-70,40,51,-51,-15,-127,12,-70,-39,5,-27,-42,-56,23,49,-6,23,9,49,-53,-55,18,-3,26,0,-34,49,-72,34,-5,-8,74,-16,-91,-4,41,-19,-18,-7,58,28,52,-3,-57,8,-50,55,-66,27,-93,59,36,-81,-26,-42,22,-109,13,15,-35,68,-45,-6,-27,28,21,-65,34,18,36,26,-89,-36,50,7, 
  /* [5][0][][] */ -46,43,74,10,73,-6,58,-31,4,41,-24,-24,36,-5,12,-19,-21,-41,10,28,-90,0,-46,81,-27,-18,45,13,69,-76,-8,57,29,111,-5,24,-15,21,64,-32,-27,114,108,-49,-18,75,45,-12,12,9,-33,48,2,-8,43,-81,51,-14,-46,-78,37,105,-22,-21,97,-10,-47,-92,-31,-18,-50,3,5,14,-4,-26,54,11,-47,-23,127,-8,-5,-94,-80,38,38,-2,-36,22,9,-30,-9,56,4,63, 
  /* [6][0][][] */ 43,3,-55,15,-63,-81,115,66,-42,96,11,100,-109,-83,24,83,11,-12,23,27,22,-36,-33,-30,-18,62,86,53,36,43,109,-89,55,-4,25,-40,2,39,18,101,-15,26,-38,-38,-13,-94,-82,40,51,-85,-12,82,16,28,-5,-64,113,98,31,-41,-127,73,-70,26,34,13,-7,89,66,58,-42,-4,-14,29,93,48,32,-2,59,-45,9,-32,-38,42,-7,-14,75,4,2,90,40,0,-14,0,1,122, 
  /* [7][0][][] */ 40,55,-28,-35,-74,-18,53,12,-58,18,-34,-59,-20,0,9,-37,-39,-39,2,67,-28,127,-16,1,-29,7,29,17,29,66,51,-9,76,38,-34,-1,-1,-7,0,63,-21,-28,-40,-35,49,-45,66,-19,21,-80,-90,-53,-38,-5,-18,-9,-20,-37,-90,72,30,85,3,-22,-45,-44,-75,22,-59,-24,-109,8,11,57,-56,31,-63,-17,30,-69,-64,-18,23,-52,41,-21,-4,15,-16,40,-69,119,83,-52,-44,23, 
  /* [8][0][][] */ -17,69,-77,34,-56,-20,-98,-3,-94,-36,22,8,-52,38,13,86,30,-47,0,-4,37,-20,4,-3,-35,38,-34,22,-11,-37,-31,-56,-20,-67,-12,-59,-37,32,24,6,-36,-38,63,21,-42,-48,-26,-15,-40,-28,35,68,28,-10,-65,72,-8,45,-27,-68,-47,33,34,49,-14,-34,-42,10,-25,16,-2,36,-21,-75,-107,-9,-67,32,-51,-54,-42,-23,-29,-26,7,-2,-1,1,6,96,-60,-41,-127,-116,47,-43, 
  /* [9][0][][] */ 3,27,-29,51,11,-20,28,58,-3,43,-30,55,-29,14,40,127,5,7,24,-9,37,7,35,-45,-6,-1,12,1,33,-42,34,39,-31,0,11,-81,24,-31,9,-30,-23,46,75,-40,-26,26,26,1,33,81,38,9,-47,-55,25,30,39,23,65,-49,-67,40,-29,-46,79,26,11,-45,-38,2,60,30,1,93,-10,-6,0,80,-59,-8,64,-25,42,-11,6,-36,-16,1,-28,50,3,-20,40,25,-52,-18, 
  /* [10][0][][] */ 51,-17,-67,7,-40,-48,52,-2,22,-36,-29,-15,-67,-3,19,-47,-71,-44,10,15,11,39,7,-27,-53,74,26,-12,-61,-42,-36,8,49,-23,27,-7,33,-82,82,127,42,-82,-28,19,-3,-59,10,46,23,56,-56,-61,-3,37,-18,39,-25,-113,44,84,3,4,-71,-21,-19,-74,-21,44,-4,-26,-34,24,89,3,5,-72,30,-109,42,-14,-60,41,15,9,-13,-3,-6,36,-61,-34,16,108,52,52,-21,-1, 
  /* [11][0][][] */ -56,-63,26,-45,-29,-45,-53,-48,32,-29,9,4,-3,18,20,-30,-47,-30,48,1,-33,29,-57,-124,-17,1,-45,38,18,-35,41,-72,15,-11,23,-44,-95,9,-80,9,-51,15,-79,55,47,19,-7,-34,19,-48,-61,-60,27,47,50,-68,-59,-103,-15,-9,-24,-45,-9,-127,-24,-97,-10,94,98,13,29,-36,-29,-38,46,10,84,-32,23,24,5,13,-27,92,113,39,-1,-33,-67,-69,-9,54,55,38,39,59, 
  /* [12][0][][] */ 29,-19,4,-58,80,109,-21,26,26,100,18,56,7,40,-11,35,-43,71,7,70,124,15,98,-56,27,31,-88,-40,7,97,48,-33,51,-42,1,-58,26,5,-52,-43,8,-17,69,43,-57,9,-2,-2,-19,83,24,36,-51,-41,45,39,62,103,37,13,3,-72,14,-119,20,127,17,-114,23,-30,67,52,6,72,10,60,-13,125,-123,-2,27,39,108,36,-8,122,-11,-65,95,20,-91,32,89,32,-50,-88, 
  /* [13][0][][] */ -3,34,-1,-75,-24,-13,-11,-31,6,-4,-34,-74,60,-105,-73,-51,-23,-17,-77,-1,-56,-34,23,95,-59,-2,84,7,26,-40,89,9,30,-23,-112,127,-39,-46,6,-50,122,8,-26,19,9,-118,89,-4,111,-6,-50,21,2,-21,4,77,114,-19,-38,-21,59,23,-31,-96,17,60,-29,29,-74,-25,-72,31,-83,46,-43,-86,-97,60,28,94,3,47,52,-90,53,47,29,-32,-4,-38,-10,15,-47,47,-51,-10, 
  /* [14][0][][] */ 15,53,-52,-33,117,105,-59,3,15,-26,75,3,12,-27,-50,-29,-78,22,28,127,36,-24,8,29,17,54,-12,77,24,-23,-12,39,58,14,-23,23,10,69,55,-12,74,28,64,-19,-30,-60,65,-30,54,17,16,8,13,21,-12,43,49,85,-58,-41,-36,-77,-49,-71,12,-30,-7,-32,-46,65,24,55,19,9,-24,-31,26,45,-58,-9,58,12,20,-1,-26,41,0,-18,-10,82,61,-26,36,-21,-60,-52, 
  /* [15][0][][] */ -55,-46,12,-39,-21,-34,-15,-69,3,-16,-10,46,13,-20,33,25,-82,-27,31,-53,-7,0,-21,-87,17,-2,36,-56,-60,-57,-74,40,-44,46,33,-78,-14,-36,12,-5,5,-37,-35,4,24,1,51,67,-49,-25,7,-61,-28,33,-5,-52,-127,-91,66,58,7,-8,-98,24,-91,-41,-30,31,16,-60,51,-54,12,-47,-43,-47,14,-48,56,4,-55,53,24,27,14,-25,-91,22,-29,-82,-67,83,54,-38,-21,62, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.001383095164783299, 0.0021665876265615225, 0.0024168570525944233, 0.0026399022899568081, 0.0025974125601351261, 0.002743701683357358, 0.0024765960406512022, 0.0024503064341843128, 0.0030153556726872921, 0.0027646378148347139, 0.002317243255674839, 0.0020797192119061947, 0.0023366454988718033, 0.0022250732872635126, 0.0024193811696022749, 0.0032319752499461174, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 2582, -4217, -2692, -3187, -1798, 4561, -4813, 3883, -1482, -4201, 10680, -1937, 8073, 11203, 10534, -1571, 7239, -2370, -6433, -1153, 2390, -1512, 4872, 588, 1067, -4187, -1986, -4211, -4824, -7012, 1490, 1894, -8352, -6709, -7344, 969, 1543, -2976, -2143, 7968, 887, 1698, 1243, -4253, 10213, 15039, -5598, 16403, -89, 2793, 10275, -1497, -324, -5131, -2811, 2794, -2816, 122, 7105, 9159, 5047, 8470, 13008, -11371, -128, 1629, -2379, 9648, -3250, -3590, 1270, 7109, -2044, 2456, -1237, 5808, -4259, -926, 11565, 8001, 1026, 9581, -7120, 1582, 7773, 174, -5815, -6245, 4267, -9062, 13667, 135, -3540, 788, -3286, -3826, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00025775129324756563, 0.00017234891129191965, 0.00012740808597300202, 0.00021096793352626264, 0.00020862575911451131, 0.00024019199190661311, 0.0002899007813539356, 0.00019751543004531413, 0.00021935031691100448, 0.00012551202962640673, 8.6058018496260047e-05, 0.00021224531519692391, 0.00013600364036392421, 0.00010040480992756784, 9.1604342742357403e-05, 0.00014678839943371713, 0.00016392757243011147, 0.00017889165610540658, 0.00012106003850931302, 8.2290680438745767e-05, 0.00016405657515861094, 0.00032676718547008932, 0.00016444914217572659, 0.00034393029636703432, 0.0004158465308137238, 0.00010764325270429254, 0.00022238228120841086, 0.00011140757851535454, 0.00016735678946133703, 7.7775221143383533e-05, 0.00026511642499826849, 0.00018004387675318867, 0.00015661367797292769, 0.00011169356002938002, 0.00011877172073582187, 0.00030662296921946108, 0.00016337401757482439, 0.00019348518981132656, 0.0002044958237092942, 0.00012377370148897171, 0.00023294478887692094, 0.00017729343380779028, 0.00021416689560282975, 8.7765380158089101e-05, 0.00012629937555175275, 9.1089459601789713e-05, 0.00017200039292220026, 7.2180206188932061e-05, 0.00019088939006906003, 0.00014097041275817901, 8.2443861174397171e-05, 7.5390351412352175e-05, 0.00013560678053181618, 0.0001392791309626773, 0.00021152310364414006, 0.00019177680951543152, 0.0001717191917123273, 0.00021377329539973289, 0.00017084636783692986, 0.00016731848882045597, 0.00024640979245305061, 0.00018644215015228838, 0.00012084947957191616, 8.6586529505439103e-05, 0.00018654312589205801, 0.0003282176039647311, 0.00027202273486182094, 0.00014473515329882503, 0.00019239886023569852, 0.00010266371100442484, 0.00020656477136071771, 0.00012263550888746977, 9.3597685918211937e-05, 0.00018377821834292263, 0.00028500769985839725, 0.00016983869136311114, 6.6376429458614439e-05, 0.00027106699417345226, 0.00012847250036429614, 0.00010027081589214504, 0.00020357730682007968, 0.00010693266813177615, 0.00021708694112021476, 0.00016573797620367259, 0.00013272713113110512, 0.00016194707131944597, 0.00011606774933170527, 0.0001278899289900437, 0.00025127545814029872, 0.00010902302892645821, 8.0987847468350083e-05, 0.00041024814709089696, 0.00026095102657563984, 0.00023821950890123844, 0.00012467669148463756, 0.00025577706401236355, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 11,62,-49,12,-55,5,78,16,59,-85,-127,34,-42,-62,-12,-126,-57,22,15,58,23,69,65,96,-10,-24,-57,-47,-3,-38,13,-94,39,59,-6,127,-7,52,14,28,17,-90,-14,46,-61,-92,29,30,-10,-99,115,-101,76,74,24,36,-69,-96,7,-127,-127,1,-67,-7,-59,31,36,-14,-6,116,56,-42,-20,57,38,-42,-32,-6,-12,12,15,-127,47,-13,-30,-59,70,7,-87,19,-127,31,22,-14,67,7, -54,-34,5,75,-1,127,6,-38,70,31,-84,-33,-50,-112,-71,120,-127,66,34,102,106,14,55,17,14,-4,4,-32,52,102,-12,-127,127,127,27,16,47,111,-26,-127,127,-63,101,101,-6,-60,127,-100,25,-127,14,-127,94,127,-14,-127,12,42,-127,-27,35,-127,-79,84,-27,66,79,-26,-8,127,127,-23,-124,10,-30,-127,127,-33,-38,127,-18,-47,127,-43,6,-43,127,40,89,105,-102,-5,121,-31,127,6, 3,-40,38,45,-47,-24,11,46,64,59,-71,-28,-57,21,-64,-127,-18,55,9,70,37,62,38,127,12,-108,-7,25,44,67,-16,-66,2,-38,-3,38,2,-10,3,38,13,46,-5,74,-34,-44,36,-22,2,-124,-71,44,8,14,76,19,127,-92,6,-94,-48,38,-127,-41,31,16,40,-15,-40,68,23,-8,74,-81,-7,24,107,0,-94,-34,-47,-73,48,-43,-30,-71,47,21,-53,29,-61,13,58,30,36,-29, 
  /* [0][1][][] */ 96,-28,39,22,6,-54,101,12,-35,-115,-67,127,-13,-127,-81,11,3,-75,78,19,-124,5,-127,-85,-32,-2,-100,127,-50,34,127,72,79,59,31,43,-127,107,-8,-79,9,-127,26,59,36,-127,18,-61,-127,52,-30,-1,83,-37,93,30,-73,1,-14,34,-8,-1,-23,24,-75,-26,78,-54,-23,28,-34,-127,-92,92,127,-22,93,76,-4,-89,127,-37,-14,104,14,6,-30,127,-17,14,-41,-2,-16,-104,-14,-4, -127,16,-59,127,-77,-113,-127,-127,35,43,15,15,-127,-62,-7,117,-34,-127,127,127,-5,-127,-84,3,-127,78,11,67,-5,-41,-112,85,-62,70,127,-86,8,127,127,-39,-58,-6,27,24,56,-118,-69,-107,20,-26,-24,96,27,40,71,-18,-14,51,58,1,-12,-3,-81,127,37,-127,97,127,25,86,-112,-91,7,64,-98,-31,112,127,55,-89,-57,-2,-73,49,38,-44,91,89,110,14,7,-127,-127,-51,-12,127, 16,2,127,-2,-13,-36,15,6,-26,127,-60,68,-31,9,-127,-1,34,-21,0,27,-127,5,-38,-16,-17,-20,127,-18,127,127,14,-107,37,-76,10,60,-104,44,-8,-19,-24,58,44,127,8,-16,-8,-83,110,18,-117,-23,35,-44,-127,35,66,-1,-93,-2,-12,22,-34,96,127,-32,18,-37,-67,40,-47,-61,-60,-127,-16,9,1,16,-89,-69,-72,-72,2,127,-38,12,5,32,10,2,-11,18,16,127,38,-6, 
  /* [0][2][][] */ 41,-63,34,-100,62,-20,30,44,-28,-66,-33,-41,-39,33,-19,-9,10,25,-30,50,0,27,-35,-30,14,51,3,47,-55,-33,-4,56,22,5,7,-30,25,55,5,-74,-8,43,-42,-107,-127,21,26,-76,-65,36,-76,75,12,17,-12,22,-41,-9,41,23,-13,-11,-6,23,-47,65,-64,-127,47,-31,18,59,121,29,10,-8,-1,-44,-127,-51,26,4,11,-14,-127,39,-18,57,-127,127,24,59,4,-15,46,-7, -41,62,-11,23,127,84,-16,-8,-127,56,-73,-44,99,-12,-26,-1,17,75,46,-45,-6,-5,7,-26,51,47,17,69,9,93,-36,19,1,79,36,-56,23,70,18,-81,-41,2,-127,-45,-48,16,-23,-127,10,-2,-120,114,127,-31,-20,-27,-36,127,11,-21,-11,-107,58,95,-11,-4,-37,-37,127,7,12,50,77,-4,-27,7,-38,-66,5,-112,-26,10,10,-31,-63,127,13,25,25,60,2,26,-15,-17,21,-4, 3,127,75,-28,31,-11,4,5,33,40,-22,-25,-26,-7,-77,72,8,35,-22,37,16,28,-63,-74,-6,127,36,75,17,-10,-31,-40,-19,12,14,7,9,46,16,-85,5,49,-2,-44,-127,36,2,-14,21,59,-127,110,15,18,-34,24,54,-2,17,1,-46,-30,-5,-4,49,27,-127,-48,-13,-65,5,41,127,-42,-19,26,92,-29,-106,-53,-55,-22,34,-9,-41,49,-53,24,-80,117,-43,43,39,5,50,1, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.012663151137530804, 0.0084673883393406868, 0.0062594753690063953, 0.010364715941250324, 0.010249646380543709, 0.011800474487245083, 0.014242635108530521, 0.0097038028761744499, 0.010776536539196968, 0.0061663235537707806, 0.0042279739864170551, 0.010427473112940788, 0.0066817691549658775, 0.0049328221939504147, 0.0045004612766206264, 0.0072116176597774029, 0.0080536538735032082, 0.0087888296693563461, 0.0059476001188158989, 0.0040428871288895607, 0.0080599915236234665, 0.016053857281804085, 0.0080792782828211784, 0.016897069290280342, 0.020430266857147217, 0.0052884421311318874, 0.010925495065748692, 0.005473380908370018, 0.0082221291959285736, 0.0038210453931242228, 0.013024995103478432, 0.0088454373180866241, 0.0076943272724747658, 0.0054874313063919544, 0.005835176445543766, 0.015064184553921223, 0.0080264583230018616, 0.0095057999715209007, 0.010046745650470257, 0.0060809208080172539, 0.011444424279034138, 0.0087103098630905151, 0.010521878488361835, 0.0043118554167449474, 0.0062050051055848598, 0.0044751651585102081, 0.0084502659738063812, 0.0035461662337183952, 0.0093782702460885048, 0.0069257835857570171, 0.0040504126809537411, 0.0037038782611489296, 0.0066622719168663025, 0.0068426923826336861, 0.010391990654170513, 0.0094218682497739792, 0.0084364507347345352, 0.010502541437745094, 0.0083935698494315147, 0.0082202469930052757, 0.012105951085686684, 0.0091597801074385643, 0.0059372554533183575, 0.0042539392597973347, 0.009164741262793541, 0.016125114634633064, 0.013364298269152641, 0.0071107428520917892, 0.0094524296000599861, 0.0050438004545867443, 0.010148391127586365, 0.006025001872330904, 0.0045983926393091679, 0.0090289032086730003, 0.014002240262925625, 0.0083440635353326797, 0.0032610301859676838, 0.013317343778908253, 0.0063117691315710545, 0.0049262391403317451, 0.010001619346439838, 0.0052535315044224262, 0.010665338486433029, 0.0081425979733467102, 0.0065207970328629017, 0.0079563530161976814, 0.0057023321278393269, 0.0062831481918692589, 0.012344998307526112, 0.005356229841709137, 0.0039788796566426754, 0.020155221223831177, 0.012820351868867874, 0.011703567579388618, 0.0061252838931977749, 0.012566159479320049, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 8383, 3241, 1588, -1991, 8169, 12615, 14711, 1877, -1249, 10356, 1300, -2846, 8393, 2533, -176, 330, 5062, 10732, -486, 38, 5006, 6705, 5511, -2632, -5376, -1132, 10792, -1158, 2633, 452, 9863, -1324, 8608, 2326, 6137, -4659, 406, -5346, 1546, 1565, 3852, 1232, 276, -247, 1578, 1854, 3745, 2699, 5899, 2543, 11092, 3073, -5523, 1479, 260, 2990, 2240, 1882, 8247, 1322, -1065, 4887, 6425, 6859, 3938, 8382, -6445, 4007, 7954, -554, 8685, 1489, 2462, 3030, 4157, 2823, -282, 1658, 1992, 5472, 3792, 2045, 6935, 92, 1419, 8055, 1500, -1096, 26878, -471, 1863, -1345, 7083, 2903, -1535, -762, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 9.6293311798945069e-05, 0.00010096375626744702, 0.00014559425471816212, 0.00011514939978951588, 0.00010313450184185058, 7.1924769144970924e-05, 5.9052625147160143e-05, 0.00014611992810387164, 0.00013373394904192537, 7.574043411295861e-05, 0.00014003150863572955, 0.00013763668539468199, 7.2553288191556931e-05, 0.00015165137301664799, 0.00015141641779337078, 0.00016666398732922971, 0.00011142765288241208, 8.1629681517370045e-05, 0.00015647512918803841, 0.00015238983905874193, 0.00013772249803878367, 0.00011013622861355543, 0.0001257698459085077, 0.00016542723460588604, 0.00012009935744572431, 0.0001550227461848408, 8.8015935034491122e-05, 0.00010155131167266518, 0.00012025374599033967, 0.0001112795143853873, 8.3599712525028735e-05, 0.00017766057862900198, 9.4515533419325948e-05, 0.00014580483548343182, 0.00011041297693736851, 0.00013999675866216421, 0.00014646076306235045, 0.00010997834033332765, 0.00011972930224146694, 0.00013544433750212193, 0.00012964165944140404, 0.00022104415984358639, 0.00021843552531208843, 0.00023463861725758761, 0.00022473289573099464, 0.00021022872533649206, 0.00013742003648076206, 0.00017849827418103814, 0.00010204775026068091, 0.00017629993089940399, 6.9672933022957295e-05, 9.3387949164025486e-05, 9.8638389317784458e-05, 0.00013650141772814095, 0.00016679846157785505, 0.00013413299166131765, 0.00013753963867202401, 0.00011919740791199729, 9.4997194537427276e-05, 0.00015224104572553188, 0.0002281530323671177, 0.00014103701687417924, 0.00011294154683127999, 9.9539851362351328e-05, 0.00012032857193844393, 9.7718781034927815e-05, 8.2631966506596655e-05, 0.00011563526641111821, 8.9826462499331683e-05, 0.00016621415852569044, 9.1774578322656453e-05, 9.7388729045633227e-05, 0.00012426987814251333, 0.00012209055421408266, 0.00013797747669741511, 0.00010109668073710054, 0.00012957179569639266, 0.00013165851123631001, 0.00016849917301442474, 0.00010880162881221622, 0.00012615184823516756, 0.00013775468687526882, 0.00010222108539892361, 0.00018222935614176095, 0.00021279625070746988, 8.7705331679899246e-05, 0.00015792512567713857, 0.00020106261945329607, 3.6262721550883725e-05, 0.00016996316844597459, 0.00014384168025571853, 0.00017384217062499374, 9.2497430159710348e-05, 0.00014068547170609236, 0.00011947412713197991, 0.00017246902280021459, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -12,32,18,-39,-24,-73,-42,-40,37,-62,18,-54,31,-127,-39,-78, 
  /* [1][0][][] */ -66,18,-109,-38,-30,19,-64,-2,-51,60,38,-110,88,127,112,30, 
  /* [2][0][][] */ -42,20,-32,-3,0,-61,32,-30,-102,106,50,-23,-2,30,-46,127, 
  /* [3][0][][] */ -66,-73,12,-74,-55,-14,-61,-89,16,17,44,-36,-92,-63,-127,-30, 
  /* [4][0][][] */ 64,-35,-44,26,-19,12,-127,27,-3,15,15,5,58,32,5,-82, 
  /* [5][0][][] */ -7,62,-56,-34,14,-84,-12,-127,51,45,-56,-69,6,-82,-47,-76, 
  /* [6][0][][] */ -8,-16,22,49,-100,127,-7,-70,-48,-74,125,-48,-58,-7,-105,7, 
  /* [7][0][][] */ -24,78,109,-39,33,74,42,-87,-11,73,-58,-17,127,66,89,45, 
  /* [8][0][][] */ -76,-34,-8,32,63,21,103,111,-69,34,-119,-104,51,127,-33,-72, 
  /* [9][0][][] */ 43,-46,89,35,-94,-42,-114,-111,104,39,59,-13,-5,-127,2,-89, 
  /* [10][0][][] */ -38,-106,2,-82,-87,44,4,47,10,-100,-27,79,-33,18,-127,33, 
  /* [11][0][][] */ 127,4,41,21,-109,-7,60,-40,76,61,-37,-13,29,-100,-31,89, 
  /* [12][0][][] */ -116,-92,124,-64,88,-37,38,79,97,12,122,40,-32,-1,-127,81, 
  /* [13][0][][] */ -1,-32,0,29,19,15,91,34,-68,-9,1,43,-8,127,74,-36, 
  /* [14][0][][] */ 124,-72,127,-1,35,47,74,10,49,75,22,21,108,11,54,-64, 
  /* [15][0][][] */ -48,127,25,-84,81,63,-89,89,-34,-71,-24,48,-53,68,-44,-35, 
  /* [16][0][][] */ -16,75,97,-13,10,114,29,-34,-18,14,-20,16,79,34,127,93, 
  /* [17][0][][] */ -24,36,63,-120,41,-91,-14,-64,-51,92,-27,4,-51,9,127,-102, 
  /* [18][0][][] */ -60,7,-31,-58,67,86,-24,-72,14,91,127,16,35,109,-13,-12, 
  /* [19][0][][] */ 48,110,83,96,21,-34,-12,-31,-20,127,8,87,70,86,-11,16, 
  /* [20][0][][] */ 71,-10,-20,45,-44,-41,-44,43,-13,-4,-127,-19,92,-45,43,23, 
  /* [21][0][][] */ -87,-16,-27,33,-8,20,-127,11,-30,29,40,22,-2,54,-56,4, 
  /* [22][0][][] */ 4,-8,-80,-29,127,-22,-34,29,59,73,-10,56,13,16,14,7, 
  /* [23][0][][] */ -77,-12,8,7,-37,48,31,56,-6,127,-23,-51,46,12,-23,-50, 
  /* [24][0][][] */ 24,-127,64,27,110,5,98,-54,75,59,46,12,-84,74,20,-42, 
  /* [25][0][][] */ 81,-52,25,-4,7,36,-66,57,80,-17,-31,32,127,-13,73,28, 
  /* [26][0][][] */ 42,23,54,90,103,5,-50,37,7,52,36,127,65,-59,31,-22, 
  /* [27][0][][] */ -27,13,-34,60,-79,86,-32,-86,-5,-78,120,-26,60,15,127,37, 
  /* [28][0][][] */ -20,12,-57,-127,59,-68,-6,3,-38,15,-1,100,-35,-39,-86,73, 
  /* [29][0][][] */ 127,78,-122,98,3,102,4,-67,69,107,-39,73,-105,67,25,31, 
  /* [30][0][][] */ -49,70,-108,3,71,-7,12,46,-47,-3,-61,-12,25,88,14,127, 
  /* [31][0][][] */ -18,-77,24,24,49,-62,-70,79,1,-22,-5,11,-69,-3,24,127, 
  /* [32][0][][] */ -72,27,-7,1,-69,55,26,62,25,-127,30,-69,0,8,24,53, 
  /* [33][0][][] */ -57,-18,127,101,-18,48,-103,-36,-65,-38,-8,-43,-10,11,35,112, 
  /* [34][0][][] */ -29,-9,-102,-80,37,5,-21,90,26,3,-11,-6,-56,-11,-18,127, 
  /* [35][0][][] */ 71,-3,26,-15,18,30,-50,-20,5,-127,-57,41,15,-33,59,-27, 
  /* [36][0][][] */ -11,18,-112,7,44,127,24,75,-29,-11,54,39,-12,24,-47,62, 
  /* [37][0][][] */ 90,25,29,-30,52,-127,1,-8,-105,54,-80,7,56,27,112,16, 
  /* [38][0][][] */ -28,126,34,-77,71,24,37,-99,39,15,-127,83,-6,-79,-84,30, 
  /* [39][0][][] */ 95,-19,-94,-35,-31,-4,-55,-74,-7,34,-33,-63,127,30,-41,-122, 
  /* [40][0][][] */ -73,24,-107,-102,-40,-16,-50,-127,6,-7,34,-21,54,88,51,106, 
  /* [41][0][][] */ -42,-127,16,78,-7,-15,-34,11,25,-39,10,-44,-23,33,-8,-17, 
  /* [42][0][][] */ -22,127,26,-105,9,30,41,0,13,-10,-6,27,-13,-32,-51,58, 
  /* [43][0][][] */ 7,18,15,29,127,-9,48,18,34,51,-15,-86,-105,-27,-1,-45, 
  /* [44][0][][] */ 35,-27,25,22,-31,9,-24,9,14,-22,27,-22,127,-1,-21,-29, 
  /* [45][0][][] */ 21,-47,-53,41,-22,-19,-15,40,7,2,24,27,-63,127,59,-35, 
  /* [46][0][][] */ -17,-127,48,72,-56,-40,-93,39,67,13,7,-39,53,28,67,72, 
  /* [47][0][][] */ -14,-58,31,82,-11,-6,35,-14,-11,-29,-127,-58,68,1,-29,1, 
  /* [48][0][][] */ -53,91,-8,-54,12,89,-35,-127,-12,-36,103,-19,20,-76,-72,7, 
  /* [49][0][][] */ -62,23,47,-63,-4,11,127,60,-60,-22,-5,16,-17,84,-46,54, 
  /* [50][0][][] */ 78,67,-123,33,47,-123,23,29,-54,81,-74,28,13,-127,-117,-5, 
  /* [51][0][][] */ -64,0,-44,127,-86,87,-104,-77,-80,-116,98,-56,46,93,-19,44, 
  /* [52][0][][] */ -121,-17,10,-11,36,8,61,3,39,-68,-51,-35,-75,-61,-127,-14, 
  /* [53][0][][] */ -47,-100,-91,-95,5,15,40,67,-15,-127,-34,-1,-18,59,80,117, 
  /* [54][0][][] */ 13,-54,14,8,-26,-27,77,0,14,-69,32,96,-50,-40,-127,34, 
  /* [55][0][][] */ -31,-30,11,32,75,-51,106,78,-113,-37,-127,-69,61,-8,2,82, 
  /* [56][0][][] */ 2,-50,-46,-57,-77,108,-127,-1,-8,-10,-10,4,48,0,-2,-27, 
  /* [57][0][][] */ -2,86,33,-52,104,40,97,36,-113,-31,62,100,-100,29,-127,31, 
  /* [58][0][][] */ 38,-18,16,-25,53,-48,-70,-84,86,-127,-99,-17,-63,-55,-25,58, 
  /* [59][0][][] */ -51,-5,14,-8,-33,-1,-88,-33,91,127,-42,-18,-31,-27,-40,-22, 
  /* [60][0][][] */ -13,-46,6,6,-127,-22,-15,29,20,70,0,37,46,-20,40,16, 
  /* [61][0][][] */ 26,8,-76,-3,-29,-31,-127,-62,-2,17,43,92,108,-20,101,28, 
  /* [62][0][][] */ 29,-3,33,-11,-32,49,18,102,-64,71,41,44,52,21,77,127, 
  /* [63][0][][] */ -4,-125,16,-64,-109,19,3,-37,-85,-33,27,-64,-64,127,127,50, 
  /* [64][0][][] */ 29,41,-33,-25,1,49,72,-51,-78,-127,-1,50,-5,-24,-46,105, 
  /* [65][0][][] */ 6,18,81,23,69,-10,10,30,-62,17,-102,-127,88,125,4,-48, 
  /* [66][0][][] */ -66,-54,-10,-127,-74,-77,85,-38,-34,-42,30,68,-120,-83,-105,96, 
  /* [67][0][][] */ -37,-110,-55,-9,-87,94,-10,-99,-41,-3,-47,-127,109,-6,-9,30, 
  /* [68][0][][] */ 127,78,48,11,-92,-11,-32,-61,-15,-34,-64,-28,8,-24,57,-88, 
  /* [69][0][][] */ 25,7,56,-57,-17,-71,-82,42,-25,127,-16,6,-14,36,68,-20, 
  /* [70][0][][] */ 41,13,-65,17,-95,47,-62,-78,127,122,29,43,77,-94,-49,57, 
  /* [71][0][][] */ 127,-69,106,93,-78,-55,65,-26,113,38,-95,28,76,-30,29,-45, 
  /* [72][0][][] */ 37,-74,42,107,95,-53,-125,101,127,2,9,38,-20,-50,-58,52, 
  /* [73][0][][] */ 61,17,25,-68,31,-127,-36,43,33,63,-52,-9,28,-98,11,-26, 
  /* [74][0][][] */ 127,-12,49,45,-127,-52,24,42,-54,-94,-2,-1,30,-101,-14,-32, 
  /* [75][0][][] */ 76,127,-88,40,29,96,35,-44,-44,-34,6,55,-107,33,68,100, 
  /* [76][0][][] */ -57,-12,14,-77,-62,9,109,-17,-71,18,68,43,-53,-118,-35,127, 
  /* [77][0][][] */ -64,127,-15,-1,-24,-33,36,117,-12,-50,50,46,-72,-8,-115,97, 
  /* [78][0][][] */ 70,-21,-34,22,-66,17,-127,-32,17,-2,-57,-17,70,-35,40,5, 
  /* [79][0][][] */ -70,18,95,15,-41,-94,-20,-60,-70,11,36,-12,-109,92,-33,127, 
  /* [80][0][][] */ -7,59,29,-127,29,14,53,28,11,-28,67,34,37,-78,-45,82, 
  /* [81][0][][] */ 68,-87,29,-57,91,17,25,47,127,67,-58,-45,18,55,-41,-112, 
  /* [82][0][][] */ 74,24,46,28,28,-17,7,-4,2,127,-27,-9,22,-12,65,-104, 
  /* [83][0][][] */ 7,85,-11,27,73,63,127,66,-20,46,-38,-64,-87,91,-18,-88, 
  /* [84][0][][] */ -13,-69,27,51,-26,-56,-127,47,-104,29,1,-32,-55,59,-10,-6, 
  /* [85][0][][] */ -64,56,7,-18,-5,-51,37,-66,-33,14,66,-22,-127,-69,-105,59, 
  /* [86][0][][] */ -33,41,110,68,9,-72,15,39,-4,30,-21,-27,-2,67,-127,-62, 
  /* [87][0][][] */ -10,32,127,-20,-71,-16,14,2,15,-16,2,27,-49,-1,-28,-6, 
  /* [88][0][][] */ 60,-25,-127,-27,-10,101,-54,16,-77,-126,-119,-74,127,-31,-72,87, 
  /* [89][0][][] */ 20,13,-2,-127,28,-21,-97,48,111,-32,36,-74,22,-21,29,-64, 
  /* [90][0][][] */ -18,49,16,-12,-15,44,3,117,6,-76,8,127,21,-7,-61,70, 
  /* [91][0][][] */ -61,34,-14,23,68,29,-21,-22,-27,3,16,38,-101,-127,-47,40, 
  /* [92][0][][] */ -43,56,-15,-22,-85,44,-50,40,-63,15,127,35,-27,-18,44,67, 
  /* [93][0][][] */ 82,38,102,13,-127,-98,70,62,-5,-114,2,-37,78,-89,-56,10, 
  /* [94][0][][] */ -1,-109,-6,-124,47,-14,35,33,107,-58,-3,127,-41,30,-87,31, 
  /* [95][0][][] */ 9,-85,-23,-31,86,91,-68,47,90,53,-93,65,4,127,-56,0, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0014367129188030958, 0.0015063966857269406, 0.002172291511669755, 0.0017180489376187325, 0.0015387845924124122, 0.001073129940778017, 0.00088107539340853691, 0.0021801346447318792, 0.0019953337032347918, 0.0011300604091957211, 0.0020892943721264601, 0.0020535632502287626, 0.001082507660612464, 0.0022626647260040045, 0.0022591592278331518, 0.0024866554886102676, 0.001662519876845181, 0.0012179289478808641, 0.0023346359375864267, 0.0022736827377229929, 0.0020548435859382153, 0.0016432516276836395, 0.0018765077693387866, 0.0024682029616087675, 0.0017919031670317054, 0.0023129661567509174, 0.0013132130261510611, 0.0015151631087064743, 0.0017942066770046949, 0.0016603096155449748, 0.0012473221868276596, 0.0026507265865802765, 0.001410188153386116, 0.0021754333283752203, 0.0016473807627335191, 0.0020887758582830429, 0.0021852198988199234, 0.0016408958472311497, 0.0017863819375634193, 0.0020208528731018305, 0.0019342759624123573, 0.0032980171963572502, 0.0032590958289802074, 0.003500848775729537, 0.0033530537039041519, 0.0031366490293294191, 0.0020503306295722723, 0.0026632251683622599, 0.001522570033557713, 0.0026304253842681646, 0.00103953224606812, 0.0013933643931522965, 0.0014717017766088247, 0.0020366248209029436, 0.002488661790266633, 0.0020012874156236649, 0.0020521152764558792, 0.0017784459050744772, 0.0014173745876178145, 0.0022714626975357533, 0.0034040827304124832, 0.0021042965818196535, 0.001685107359662652, 0.0014851518208160996, 0.0017953230999410152, 0.0014579810667783022, 0.0012328831944614649, 0.0017252981197088957, 0.0013402263866737485, 0.0024799439124763012, 0.0013692926149815321, 0.0014530566986650229, 0.0018541279714554548, 0.0018216121243312955, 0.0020586478058248758, 0.0015083799371495843, 0.0019332336960360408, 0.0019643676932901144, 0.00251403683796525, 0.0016233391361311078, 0.0018822074634954333, 0.0020553236827254295, 0.0015251563163474202, 0.0027188935782760382, 0.003174956887960434, 0.0013085787650197744, 0.002356270095333457, 0.0029998889658600092, 0.00054104608716443181, 0.0025358798447996378, 0.0021461427677422762, 0.0025937552563846111, 0.0013800776796415448, 0.0020990516059100628, 0.0017825746908783913, 0.0025732675567269325, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { -25783, -314, 3924, -21602, 11140, -16315, 6040, -9550, 13231, -10200, 19421, 17429, -6164, -33057, -8421, 10549, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 7.2733782872091979e-05, 5.2609248086810112e-05, 6.1861916037742049e-05, 5.3155737987253815e-05, 5.8546662330627441e-05, 0.00012338405940681696, 5.5752112530171871e-05, 6.3525229052174836e-05, 8.8516229880042374e-05, 0.0001241800346178934, 7.1776434197090566e-05, 4.0164293750422075e-05, 7.2962800913956016e-05, 7.4839779699686915e-05, 6.7625020164996386e-05, 6.4423045841977e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -19,44,0,-20,-10,-79,-25,20,-18,-52,51,22,43,-65,33,47,-35,-22,35,9,85,38,-44,44,22,56,127,64,30,54,65,-36,-10,-2,4,-19,11,40,-18,-40,107,-14,54,1,-1,-4,27,-28,14,-29,95,4,-24,-3,24,5,46,-28,27,21,7,48,-33,-11,8,14,41,26,62,-16,50,27,30,39,26,30,43,-38,2,7,-34,50,-3,16,-64,9,12,82,-27,16,-82,1,28,32,65,70, 
  /* [1][0][][] */ 49,-1,-25,-4,8,-35,85,-48,-93,-14,-113,-35,6,-43,-13,-54,-47,-2,-36,-26,-45,-35,108,1,-13,13,46,58,-37,10,-18,19,-31,31,47,-34,-19,30,-69,104,16,-26,-28,-61,52,-102,-15,6,-105,-13,48,-97,-46,36,35,81,15,12,-71,34,-38,3,-13,-26,15,-1,83,-21,-68,-127,-2,29,17,48,5,48,-61,-30,98,-27,56,-10,68,-78,-6,-62,-14,8,26,-27,12,-24,59,-27,-21,59, 
  /* [2][0][][] */ 28,2,4,-11,81,38,-22,-3,-65,50,-5,-10,34,-3,-17,29,39,-37,-127,-21,3,-10,-26,43,-9,-12,-34,45,-46,-2,-12,55,-31,-38,-32,-12,-32,23,-33,-22,47,-7,21,57,31,25,1,-16,-97,-13,-19,49,5,37,28,-52,23,13,55,55,-32,-30,-28,42,12,-33,-41,5,19,-7,-34,-43,18,33,22,82,-47,8,-69,-9,9,17,57,-26,6,-62,-23,-65,-15,-18,-16,87,-18,-15,93,-23, 
  /* [3][0][][] */ 4,2,-21,-120,-4,-21,102,-17,54,105,-19,-9,-11,-25,11,58,79,52,-6,29,-34,-1,36,3,-17,53,37,-20,-21,-17,-59,77,-3,-18,46,11,-10,-40,-2,29,16,16,32,29,71,-11,1,33,34,-1,29,-51,100,48,7,-19,15,-4,29,-78,9,46,96,-13,-32,5,127,-22,16,18,-10,32,13,-35,11,-70,7,-45,89,-16,-15,-37,-59,-17,-27,-20,69,91,-67,48,-58,20,7,-37,-43,18, 
  /* [4][0][][] */ -10,37,25,9,-34,1,-20,-38,8,-29,-9,-12,11,55,-30,38,-45,-29,-7,-93,7,-1,-28,-16,-23,-40,-11,-4,-17,127,-22,-30,4,-4,17,-47,52,34,-30,13,36,-9,-5,-33,-39,-29,40,33,39,-17,-43,-38,-75,30,36,55,-32,57,-25,38,-25,-56,-56,2,71,0,-40,-31,-39,12,14,-87,-18,47,69,54,-24,22,-34,51,18,88,33,-70,30,-22,-10,-46,-33,-38,-33,-16,14,-11,12,-8, 
  /* [5][0][][] */ -16,-8,41,-22,-4,-18,8,-5,48,18,-21,-4,-3,-26,-5,-16,-9,24,-44,-23,-23,28,-16,-3,12,-51,51,0,8,32,11,85,-4,-56,36,32,-42,-10,-37,-9,-33,13,-22,17,-6,44,-55,33,-33,25,54,-13,-19,-59,6,11,-10,-38,19,-40,56,35,41,25,-32,14,95,-37,10,-27,10,-13,-1,60,45,25,-20,-7,127,27,-25,-3,-38,36,34,43,7,77,-6,-35,-14,8,15,-26,-27,24, 
  /* [6][0][][] */ 36,-58,42,35,-33,75,-31,-88,-9,-34,-70,45,-5,13,1,67,-10,37,26,-38,-94,9,-28,-74,17,-59,13,56,-53,46,6,-22,42,57,18,-38,3,-17,15,2,-30,21,26,-22,11,19,-56,23,24,20,-39,-127,52,20,-34,15,-39,8,8,-29,0,-17,35,1,79,-49,9,-43,-120,28,-13,-51,-28,-82,27,-68,57,0,-45,30,-13,78,41,-56,58,-1,8,22,-24,67,-69,58,44,-15,50,-58, 
  /* [7][0][][] */ 17,-9,-78,84,-18,-1,46,9,-127,3,67,67,0,-38,0,-16,-65,6,14,-9,-100,-2,-37,-60,50,63,14,75,3,61,30,11,-67,-123,27,75,37,-5,-33,14,-12,-39,-33,-86,22,15,75,61,-19,22,-26,14,11,-19,73,-54,-33,38,-101,13,46,10,-41,-10,96,-67,102,-13,-83,-46,60,-2,3,-46,-80,-13,40,-31,121,-8,-3,-2,-50,-40,54,17,-86,40,7,16,-6,45,57,-29,106,2, 
  /* [8][0][][] */ -29,-35,1,-11,-38,-13,5,-35,18,12,61,45,-6,32,-49,-28,94,-3,14,16,7,-103,-15,-33,-10,-41,77,-18,-26,52,8,-59,-25,-8,15,13,-60,-30,39,-31,13,42,41,-45,43,5,7,45,86,-5,45,-39,13,29,-49,-10,-26,97,-52,-20,-7,-58,-40,0,-102,-5,-10,25,-26,32,53,-5,-44,-127,47,-109,33,12,-88,32,-18,3,-6,99,54,-55,-35,31,-65,98,44,-28,-49,25,-23,-63, 
  /* [9][0][][] */ -25,-30,-22,32,1,10,3,24,-31,-4,52,47,-14,14,22,-38,17,24,-7,-29,29,31,1,28,-13,21,6,31,32,-18,42,4,-33,-14,14,45,-23,9,9,-14,4,-33,41,22,52,20,17,27,-48,12,-5,46,127,9,-20,-7,-4,-7,26,24,-31,3,56,-11,14,9,45,-3,20,-2,-2,24,10,-95,-23,-70,-37,14,6,-6,-27,21,-11,-33,24,5,-42,-1,-19,66,15,19,50,46,-13,15, 
  /* [10][0][][] */ 42,12,24,15,-13,33,-37,-25,39,-6,-62,20,31,-2,-13,-60,-43,15,0,-15,8,1,-34,-11,-3,-8,-82,53,-31,33,9,26,15,19,-33,-18,2,0,-15,14,22,-11,36,-47,-42,-20,23,4,3,-8,11,-4,-30,-24,-6,32,-24,-8,-30,-3,-14,-53,-25,13,-11,-29,-72,-28,-52,-28,23,-20,-15,10,21,1,28,-6,-65,16,-3,16,19,-16,9,-6,-76,-127,1,30,-3,4,48,-42,33,16, 
  /* [11][0][][] */ 52,-72,22,21,-44,36,22,0,51,-34,-52,-36,35,-14,12,-22,-35,81,18,-97,-6,51,14,-22,25,27,72,-9,41,-65,-15,24,18,106,-101,-18,13,-28,46,46,-58,47,-31,-4,-41,-28,-11,-42,30,-39,-11,-45,-48,13,-114,127,-43,-8,-29,-54,34,-9,-41,-83,9,-80,-123,-101,-48,-18,-105,23,36,8,-11,-20,11,53,-100,-29,-1,-9,13,-31,-16,-5,53,81,61,-54,-6,-18,-27,41,100,15, 
  /* [12][0][][] */ -4,55,-33,-30,28,-39,6,46,69,-17,36,12,-13,-11,-3,14,31,-40,-23,22,20,41,-20,41,-32,-37,-111,-15,62,-19,33,-4,-17,-71,45,5,10,7,6,3,13,-56,32,41,40,9,29,-18,-55,-8,-33,51,70,-7,33,-60,49,16,-32,-35,13,34,77,4,7,4,1,26,127,26,26,22,-11,8,-9,0,-21,-57,23,-68,24,-41,17,-15,2,10,2,-89,-48,21,-34,42,26,93,2,31, 
  /* [13][0][][] */ -23,65,-78,8,27,-18,10,29,68,53,8,30,-72,-25,41,-16,20,73,69,18,-37,-23,-10,-7,29,53,-35,31,29,45,44,24,-36,66,-17,16,21,-50,-69,-55,-2,-46,0,16,90,64,-37,-13,-54,26,9,-20,-15,-38,91,35,65,-56,26,-14,72,17,-11,-3,5,107,119,47,61,36,-24,-52,21,62,-91,40,26,-62,127,-41,-24,-56,17,-1,14,57,-29,-39,-47,-30,-16,67,48,-10,57,62, 
  /* [14][0][][] */ -30,80,21,17,-47,-41,24,61,-32,-1,92,20,-76,1,62,-14,-11,42,-37,49,22,4,-76,33,-26,-17,-49,-116,12,8,-13,96,-40,30,0,4,-12,-48,26,-50,36,-28,57,-17,26,72,-56,13,-21,-28,67,45,9,30,13,22,-1,31,28,45,34,39,9,29,19,-4,-16,-39,75,65,69,16,-25,48,12,18,22,-27,13,-18,-56,90,-20,-93,78,-3,-1,21,-127,-20,-15,27,-39,29,24,37, 
  /* [15][0][][] */ 88,-63,9,38,38,21,-11,10,1,18,-95,-18,62,66,-9,-32,-41,34,-83,49,-24,-7,7,63,42,-21,87,36,35,-32,-33,48,58,53,-9,-80,56,45,41,69,59,33,-49,-7,-56,-127,16,-82,-48,-41,-12,40,-28,-71,-8,51,-29,-10,-35,41,-20,-45,-53,28,5,20,-74,28,-33,-44,-34,-2,-2,-124,-36,-91,-12,19,-86,39,81,-41,60,10,-27,-14,-25,-16,77,70,3,-56,-27,-39,49,-16, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0032780540641397238, 0.0023710571695119143, 0.0027880677953362465, 0.0023956871591508389, 0.0026386517565697432, 0.0055608218535780907, 0.002512703649699688, 0.0028630318120121956, 0.0039893565699458122, 0.0055966959334909916, 0.0032349070534110069, 0.0018101729219779372, 0.0032883756794035435, 0.0033729698043316603, 0.0030478062108159065, 0.0029034956824034452, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 7903, 89, -13378, 13244, 2440, -3395, -864, -1510, 2928, -3397, 3271, 753, 10372, -1793, 1075, -5508, 1469, 1160, -9279, -544, -572, 3431, -9935, 1516, 153, 4591, -13732, -7175, -198, -1857, -3472, -5004, 11133, 3962, 799, 1146, -1664, 7223, 5492, 8159, -1050, 3528, 3615, 13925, 313, -628, 13963, 5878, -10775, 1407, -1469, 2947, 817, -3005, -839, 4268, 2382, -2067, 2447, 5712, -12, -1282, 3268, 2697, 10513, -2448, 11804, 2166, 3091, -88, -330, 789, 404, 1512, -4631, -2833, 7619, 11866, 15442, 10425, 11253, -993, 5787, 6128, 1706, -1212, 16668, -11444, 11261, -1687, -5435, 6971, -2795, 2466, 12401, -1437, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00013837973529007286, 0.00026427567354403436, 7.133613689802587e-05, 9.3360882601700723e-05, 0.0002416680654278025, 0.0004211940395180136, 8.1801139458548278e-05, 0.00017682435282040387, 0.00037030482781119645, 0.00014044147974345833, 0.00028795970138162374, 0.00014293963613454252, 0.00011013515177182853, 0.00015255990729201585, 0.00020650676742661744, 0.00017629630747251213, 0.00038871169090270996, 0.00029955583158880472, 0.0001180055842269212, 0.00035663536982610822, 0.00037813797825947404, 0.00027977698482573032, 8.4814200818073004e-05, 0.00017491026665084064, 0.0016956934705376625, 0.00010854031279450282, 0.00013215736544225365, 0.00012323140981607139, 0.0002514735097065568, 0.00017799396300688386, 0.00016321860312018543, 0.00018442959117237478, 0.00010487153485883027, 0.0003032219537999481, 0.00019823643378913403, 0.00013230564945843071, 0.00024516595294699073, 0.00011608724889811128, 0.00012092192628188059, 0.00014413479948416352, 0.00051886728033423424, 0.00017663303879089653, 0.00021118293807376176, 8.7453096057288349e-05, 0.00039705962990410626, 0.00026832075673155487, 8.6424464825540781e-05, 0.00022848157095722854, 0.00011174062092322856, 0.00025816183187998831, 0.00032751631806604564, 0.00017982650024350733, 0.0002017350634559989, 0.00022487285605166107, 0.00031936107552610338, 0.0002045564615400508, 0.00010141971870325506, 0.00025183911202475429, 0.00024554718402214348, 0.00016630564641673118, 0.00020570700871758163, 0.00023420786601491272, 0.00020231958478689194, 0.00010654806101229042, 0.00020660735026467592, 0.00041387713281437755, 0.00013204915740061551, 0.00015546465874649584, 0.00017869466682896018, 0.00025560974609106779, 0.00022257542877923697, 0.00027682518702931702, 0.00052128260722383857, 0.00018571551481727511, 0.00012312713079154491, 0.00018079117580782622, 0.00012252497253939509, 0.00011339197953930125, 8.0144825915340334e-05, 0.00018687052943278104, 9.7716976597439498e-05, 0.00021124267368577421, 0.00016502401558682323, 0.00026709117810241878, 0.00013960376963950694, 0.00021947937784716487, 0.00011482886475278065, 0.00011395246110623702, 0.00013808204676024616, 0.0001831716945162043, 0.00013969192514196038, 0.00016159297956619412, 0.00033751581213437021, 0.00012819886615034193, 0.00013156703789718449, 0.0003046964411623776, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -53,-5,89,-50,77,-1,1,-26,3,-19,-21,-94,-24,-2,-16,1,-22,3,-4,15,-22,32,92,43,-15,51,-62,2,18,1,47,53,-63,-5,-38,-47,7,-77,-27,-47,3,-95,47,-49,-48,28,-96,-39,46,-21,-22,40,-103,1,47,-40,-3,14,-2,-6,-35,-41,7,-51,-38,-9,-36,68,-47,41,10,26,3,35,-5,-5,-18,54,127,20,-127,28,-71,2,-62,-31,-18,40,-120,36,-8,-47,10,82,-8,-1, -17,43,93,-92,-33,9,127,-52,-3,-41,-39,-7,-104,7,-97,47,-8,93,55,-28,-13,127,84,56,12,6,12,61,127,45,127,17,-46,-24,-127,-55,-12,-127,127,5,-29,-40,-56,-84,62,-19,-81,-18,121,-17,7,127,-84,-1,-60,-15,-112,19,-17,-4,-8,-127,-127,-84,-55,5,-17,-84,-47,7,15,48,-127,-4,42,-8,-41,-24,17,-106,7,2,-11,-68,54,68,-92,113,-24,-1,-2,-14,20,127,-74,-70, -127,29,37,-97,50,2,70,-32,-20,-57,-30,-17,-68,-15,-28,-10,-25,-2,-4,-47,-21,-7,98,67,-17,-10,9,9,18,-10,36,50,-31,-11,-23,73,4,-27,-51,-68,-6,81,-41,-87,-12,-54,-60,-52,39,-19,-33,29,13,-21,28,-57,1,8,4,-70,-32,-6,-86,35,-85,-25,127,67,-45,40,127,16,-3,17,45,28,23,19,-7,-31,-46,22,-127,-93,-9,-33,-68,52,-60,-32,59,48,20,67,-127,4, 
  /* [0][1][][] */ -1,-12,127,-65,26,84,-37,-14,1,-58,-47,-104,-91,29,26,95,-18,38,127,48,9,-13,122,-43,22,80,81,37,-27,18,10,3,-127,-21,33,-37,-2,-61,-71,-20,-16,7,69,0,-78,127,-117,-92,95,48,12,-63,-111,127,59,-30,34,-8,21,26,-5,-17,68,-75,-30,24,-33,-62,-23,6,-58,27,44,127,-14,-30,-127,-2,-43,-8,-68,-16,-7,-18,18,8,-127,127,-42,127,34,-127,127,-16,2,-6, 92,127,11,127,-127,-127,121,-45,127,127,-81,-93,-26,127,-24,127,127,-127,40,127,127,-99,42,-127,-127,-127,127,127,-111,127,0,127,6,127,63,-127,127,49,-9,80,127,15,-127,-127,127,-3,78,102,89,-127,127,-123,127,98,-127,127,-127,127,-127,127,-91,116,71,-127,127,127,-10,127,-127,-127,76,-127,0,121,127,71,-6,-127,105,-127,11,127,43,127,127,70,-70,126,68,33,-68,-36,-66,-57,-53,-29, -34,-22,-8,-104,-7,49,-18,2,-39,-84,-14,127,-127,-6,-3,52,-21,29,125,4,35,-37,127,-6,22,29,100,12,-6,-16,22,12,-57,-45,77,112,2,-82,-109,-52,-21,40,17,-88,-73,-71,-127,-127,127,52,-5,-38,125,-17,93,-48,46,0,30,-55,-3,-29,-122,30,-76,1,-52,-33,-57,-4,-97,-21,6,-106,8,127,-20,-105,-28,-18,-86,-5,-41,-82,-31,36,-110,63,-59,-59,127,109,-26,-67,-90,-10, 
  /* [0][2][][] */ -106,-87,91,-43,16,37,-12,28,-4,-10,38,-71,12,-15,-28,-12,-11,-9,-78,-16,-27,-20,64,-25,-11,76,30,62,-25,-26,-15,14,-34,-29,-34,-53,-1,33,-52,-127,-20,-2,43,-16,-9,28,-32,5,8,-5,-31,-54,-28,-47,26,-41,101,-2,3,-49,11,29,6,90,-26,-18,106,79,63,31,30,11,-16,-25,-13,-14,-13,-23,-9,-13,-97,-5,-16,33,-27,-10,6,-3,-127,15,-11,-127,2,-34,32,5, -12,-78,44,-99,-55,24,35,127,-60,112,127,19,-60,10,127,48,-11,-43,49,-60,-21,-53,124,-2,5,16,97,53,-27,-8,-66,-61,-9,-47,-117,-30,-71,-53,1,-34,-29,-127,-68,106,43,-2,-25,-8,-6,-24,-19,-8,47,-41,-43,-37,-58,-26,34,-96,127,45,61,29,-83,-52,-15,-96,107,23,-40,1,24,-50,31,-7,11,-106,16,-11,-58,-26,-27,-42,12,-127,-14,4,-89,-2,37,-22,25,-119,-17,127, -86,17,46,-103,5,36,27,68,-40,-32,17,64,-35,-16,-48,-30,-9,-24,-35,-37,-13,-26,93,-16,-14,21,22,27,-10,-16,-15,14,-35,-14,25,-1,6,-27,-65,-111,-24,-87,-48,-35,11,-56,-61,-14,11,-26,-24,-32,5,-77,27,-18,83,3,12,-53,26,47,-13,84,-31,-27,-7,56,57,-12,-18,-16,-39,-89,-26,6,40,-83,81,11,-36,-11,-38,4,-56,7,28,-35,-95,-3,60,11,9,-28,-17,-6, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0058811386115849018, 0.01123171579092741, 0.0030317858327180147, 0.003967837430536747, 0.010270892642438412, 0.017900746315717697, 0.0034765484742820263, 0.0075150351040065289, 0.015737954527139664, 0.0059687630273401737, 0.01223828736692667, 0.0060749342665076256, 0.0046807439066469669, 0.006483796052634716, 0.0087765371426939964, 0.0074925930239260197, 0.016520246863365173, 0.01273112278431654, 0.0050152372568845749, 0.015157002955675125, 0.016070863232016563, 0.01189052127301693, 0.0036046034656465054, 0.007433685939759016, 0.07206697016954422, 0.004612963180989027, 0.0056166881695389748, 0.0052373348735272884, 0.010687624104321003, 0.0075647435151040554, 0.0069367904216051102, 0.0078382575884461403, 0.004457040224224329, 0.012886933051049709, 0.0084250485524535179, 0.0056229899637401104, 0.010419552214443684, 0.004933707881718874, 0.0051391818560659885, 0.0061257285997271538, 0.022051859647035599, 0.0075069041922688484, 0.0089752748608589172, 0.0037167563568800688, 0.01687503419816494, 0.011403631418943405, 0.0036730396095663309, 0.0097104664891958237, 0.0047489763237535954, 0.010971877723932266, 0.013919442892074585, 0.0076426258310675621, 0.0085737397894263268, 0.0095570962876081467, 0.013572845607995987, 0.0086936494335532188, 0.0043103378266096115, 0.010703162290155888, 0.010435755364596844, 0.0070679900236427784, 0.0087425475940108299, 0.0099538341164588928, 0.00859858188778162, 0.0045282924547791481, 0.0087808119133114815, 0.017589777708053589, 0.0056120892986655235, 0.0066072479821741581, 0.0075945234857499599, 0.010863414034247398, 0.0094594554975628853, 0.011765070259571075, 0.022154510021209717, 0.0078929094597697258, 0.0052329027093946934, 0.0076836245134472847, 0.0052073113620281219, 0.0048191589303314686, 0.0034061551559716463, 0.0079419976100325584, 0.0041529713198542595, 0.008977813646197319, 0.0070135206915438175, 0.011351374909281731, 0.0059331599622964859, 0.0093278735876083374, 0.0048802266828715801, 0.0048429793678224087, 0.0058684865944087505, 0.007784796878695488, 0.005936906673014164, 0.0068677016533911228, 0.014344421215355396, 0.0054484517313539982, 0.0055915988050401211, 0.012949598953127861, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 4703, 10098, 663, 1659, 6016, 17735, -227, 2104, 11590, -452, 14170, 5973, 1768, 783, 8375, -616, 7605, 4931, 370, 8645, 1125, 15134, -1714, 2042, -12634, 1724, 2933, 1386, 10723, 2765, 3394, 3470, 2793, 9808, 5342, 7204, 4444, 2900, 5332, 5617, 18258, 1928, 1894, 1647, 4753, 14010, 8873, 9303, 303, -2781, 1786, 5297, 6423, -3395, 11876, 595, 1222, 14642, 1174, 604, 7756, 22835, 5288, -399, 14404, 15133, 3013, 3870, 6654, 3553, 1750, 2671, -4571, 5972, 1916, 6309, 1348, 10391, 2466, 8899, 2348, 561, 4719, 8730, -1, 16388, 10190, 2200, -486, 2434, 4196, 17670, 4661, 2897, 3998, 5910, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 7.8201985161285847e-05, 7.529339927714318e-05, 0.00013948114064987749, 0.00018135839491151273, 0.00012078462168574333, 5.0060698413290083e-05, 0.00016591553867328912, 0.00015668148989789188, 7.0228386903181672e-05, 0.0001667829928919673, 6.2699044065084308e-05, 9.5370422059204429e-05, 0.0001413235004292801, 0.00025670256582088768, 7.8500488598365337e-05, 0.0001069240242941305, 8.0246209108736366e-05, 0.00010948607086902484, 0.00013313847011886537, 8.0055302532855421e-05, 0.00013014636351726949, 5.8898782299365848e-05, 0.00014652483514510095, 0.00010072125587612391, 6.6225358750671148e-05, 0.00012989981041755527, 0.00013767241034656763, 0.00018119398737326264, 7.2453331085853279e-05, 0.00011004980478901416, 0.00014405077672563493, 0.00013596835196949542, 0.00010504246165510267, 7.2328308306168765e-05, 0.00012245774269104004, 8.943643479142338e-05, 0.00011931556946365163, 0.00015020387945696712, 8.4214552771300077e-05, 9.1645859356503934e-05, 4.7348101361421868e-05, 0.0001018065886455588, 0.00019213694031350315, 0.00011100449046352878, 9.7974771051667631e-05, 6.4473089878447354e-05, 8.7171531049534678e-05, 9.3321068561635911e-05, 0.00016010938270483166, 0.00012135517317801714, 0.00020981136185582727, 0.00011263819033047184, 9.1619498562067747e-05, 9.2171110736671835e-05, 6.6148124460596591e-05, 0.00013391107495408505, 0.00014933951024431735, 5.4125110182212666e-05, 0.00010284339805366471, 0.00020543251594062895, 6.6400738433003426e-05, 4.2195351852569729e-05, 0.00014089405885897577, 0.00018277271010447294, 5.8279623772250488e-05, 5.3392646805150434e-05, 0.00011129786435049027, 0.00013183803821448237, 0.00010202994599239901, 0.00011873053881572559, 0.00018213593284599483, 0.00014265495701692998, 0.00011718984751496464, 9.2460133600980043e-05, 0.00013841298641636968, 0.00012093789700884372, 0.00013079000927973539, 7.4314237281214446e-05, 0.00021014866069890559, 0.0001002635108307004, 0.00014942830603104085, 0.00014151375216897577, 9.7337528131902218e-05, 9.4524722953792661e-05, 0.00013153349573258311, 6.0052490880480036e-05, 7.543556421296671e-05, 0.00016079866327345371, 0.00020181533182039857, 0.00015955854905769229, 8.7283915490843356e-05, 5.2050894737476483e-05, 0.00010653128992998973, 0.00011973678920185193, 0.0001110427183448337, 9.9597644293680787e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 55,-32,2,109,-89,-111,89,84,127,124,-47,78,58,54,62,75, 
  /* [1][0][][] */ -127,48,-116,10,95,98,-91,39,-35,-8,-69,31,-81,24,-55,3, 
  /* [2][0][][] */ -44,39,71,-11,68,77,4,40,42,-16,10,-20,55,-127,-25,20, 
  /* [3][0][][] */ 127,-36,29,20,21,-2,14,5,24,32,-51,-10,-21,77,-6,54, 
  /* [4][0][][] */ -64,-34,-6,35,-103,18,-91,-30,19,16,-23,-52,-24,26,-34,127, 
  /* [5][0][][] */ -127,53,14,-18,108,82,-58,19,-56,29,12,-7,-99,5,-95,-6, 
  /* [6][0][][] */ -127,51,-41,63,-8,-125,87,22,11,-5,-34,70,11,36,-21,20, 
  /* [7][0][][] */ 16,51,40,-58,63,23,82,21,70,-6,42,79,127,56,-13,-22, 
  /* [8][0][][] */ -35,-38,-81,71,-68,98,-80,-65,-11,-68,70,30,127,20,-63,48, 
  /* [9][0][][] */ -47,-127,-28,59,-63,-87,8,88,44,42,-13,75,-101,14,-52,-50, 
  /* [10][0][][] */ -6,-103,-6,85,-58,73,18,-42,45,-88,70,-6,127,83,-30,58, 
  /* [11][0][][] */ -10,-33,-24,-45,-20,119,-7,2,0,9,35,-93,-11,7,-102,127, 
  /* [12][0][][] */ -24,-32,-45,105,-92,-127,24,32,60,79,-4,72,15,-20,-8,-12, 
  /* [13][0][][] */ -67,-38,-44,-4,-13,-4,38,28,-17,127,-25,-29,38,20,28,-13, 
  /* [14][0][][] */ -97,-17,-8,-110,-61,104,3,-126,97,-67,94,4,89,-4,-127,-121, 
  /* [15][0][][] */ 20,-127,113,-61,-32,-42,20,52,19,-37,-119,-30,119,-19,-18,-40, 
  /* [16][0][][] */ -21,-8,-11,-69,35,51,-39,-18,38,-127,74,-4,-52,-49,-104,-58, 
  /* [17][0][][] */ -66,-47,46,-23,46,-49,-58,62,112,-29,-4,54,51,-14,7,-127, 
  /* [18][0][][] */ 81,19,-40,-127,-1,2,88,-48,13,57,-3,36,-22,10,-33,-65, 
  /* [19][0][][] */ -27,3,-10,-41,-127,68,-17,-20,-5,-36,66,-117,-77,-4,-27,-33, 
  /* [20][0][][] */ 43,116,62,-89,49,-1,-63,83,-70,-127,44,-78,-59,51,-52,-49, 
  /* [21][0][][] */ -12,-63,-127,23,57,3,11,87,-73,-83,-4,7,55,-55,-1,30, 
  /* [22][0][][] */ 59,-2,49,2,6,1,75,13,16,77,31,21,22,-11,127,20, 
  /* [23][0][][] */ -108,-68,-26,113,42,-22,-15,5,-15,29,-8,-84,-1,69,107,127, 
  /* [24][0][][] */ -11,-35,34,14,34,-64,14,-50,48,77,-127,29,-31,-78,50,-77, 
  /* [25][0][][] */ 43,-118,71,127,85,16,-40,77,-106,61,82,-18,-27,72,54,4, 
  /* [26][0][][] */ -2,44,23,68,-66,115,-20,41,-72,-25,-101,49,14,34,75,-127, 
  /* [27][0][][] */ 32,-4,5,-53,-58,20,-65,-14,-107,-20,-91,-53,-71,15,-23,127, 
  /* [28][0][][] */ -101,40,22,2,-2,0,-127,17,-15,-60,3,-42,-16,-47,-54,-43, 
  /* [29][0][][] */ -13,-102,-1,82,-47,6,127,-25,70,55,-111,48,34,-27,-36,58, 
  /* [30][0][][] */ 69,-35,-16,22,-127,-19,-3,-48,0,31,-24,-16,-11,21,12,14, 
  /* [31][0][][] */ -127,-3,-4,44,-23,15,-10,-7,-11,-46,23,-33,-28,-43,-13,69, 
  /* [32][0][][] */ -115,-96,-99,31,-127,-119,35,-36,117,106,-81,-75,82,114,70,-59, 
  /* [33][0][][] */ -6,-26,-99,45,-109,-96,54,-5,-115,9,-37,-23,5,127,76,64, 
  /* [34][0][][] */ 38,46,11,68,-24,-36,24,14,45,-96,12,21,11,-2,68,127, 
  /* [35][0][][] */ -34,-5,-57,1,-101,-95,68,-14,49,127,-24,12,38,111,20,25, 
  /* [36][0][][] */ 9,-19,-42,78,127,-38,56,32,-62,26,-88,-78,80,1,14,10, 
  /* [37][0][][] */ -112,35,-12,-72,57,-84,-60,-1,-7,-13,-27,81,61,-28,6,-127, 
  /* [38][0][][] */ 72,75,99,-51,-127,-33,-112,-97,-85,-41,61,66,-54,-45,118,-44, 
  /* [39][0][][] */ 3,-73,25,103,21,26,47,-38,11,54,26,-30,23,127,79,83, 
  /* [40][0][][] */ 60,23,64,99,-50,-102,-2,80,-70,61,-30,-29,-33,2,127,-22, 
  /* [41][0][][] */ -11,16,30,95,-114,127,29,40,-81,23,-106,26,64,105,98,-122, 
  /* [42][0][][] */ -13,-127,25,8,76,-9,-28,8,-41,-31,-61,-53,-31,5,20,6, 
  /* [43][0][][] */ -14,-91,-56,0,103,29,-9,16,-27,-41,-74,-25,127,0,-44,33, 
  /* [44][0][][] */ 6,-18,-73,-105,23,60,6,20,11,-127,16,63,0,-10,-36,53, 
  /* [45][0][][] */ 22,-36,-50,-41,-104,127,-24,-59,43,-42,24,-57,16,-37,-48,60, 
  /* [46][0][][] */ 0,-69,-37,-21,77,-64,-3,127,1,-53,31,17,-30,-75,32,-66, 
  /* [47][0][][] */ -69,-3,2,54,0,11,15,38,-8,127,62,28,-74,58,18,52, 
  /* [48][0][][] */ 57,-22,-67,-105,33,-65,5,47,35,-52,-11,20,-50,16,-36,-127, 
  /* [49][0][][] */ 40,6,14,100,4,25,9,82,1,75,-16,27,1,-39,127,116, 
  /* [50][0][][] */ 16,-16,1,25,-127,-34,-23,-41,63,12,27,79,-19,-55,32,2, 
  /* [51][0][][] */ 11,69,39,-118,-23,127,27,-84,-27,82,26,-36,12,72,-13,-6, 
  /* [52][0][][] */ 8,23,15,-118,63,-46,0,-30,46,-14,127,-54,15,-33,-82,86, 
  /* [53][0][][] */ -85,-77,38,-110,-80,-77,-8,-104,-2,95,-61,127,-41,-37,64,-101, 
  /* [54][0][][] */ 93,5,46,-61,-82,-33,-108,-127,-12,37,45,36,-71,-37,-27,-42, 
  /* [55][0][][] */ -31,-22,-42,105,32,-3,26,46,37,127,6,63,47,45,30,70, 
  /* [56][0][][] */ 101,-127,16,63,-34,7,-6,25,78,39,24,87,-1,16,60,17, 
  /* [57][0][][] */ 97,0,127,-36,59,-38,8,-38,45,19,-47,120,89,-12,112,-100, 
  /* [58][0][][] */ 125,-112,30,-8,-3,-19,8,101,19,106,-32,51,27,73,127,-54, 
  /* [59][0][][] */ -50,-5,16,22,9,-82,-13,28,-1,27,-71,-93,-70,-31,127,22, 
  /* [60][0][][] */ 116,-41,39,32,25,-7,76,-103,45,127,-32,116,34,6,15,-35, 
  /* [61][0][][] */ 127,20,37,19,-117,-127,-19,-98,-21,-9,17,53,-19,-20,90,77, 
  /* [62][0][][] */ -29,15,-16,-6,-1,127,-64,44,-14,-5,-13,27,11,15,3,-34, 
  /* [63][0][][] */ 32,-23,-80,-127,-6,-37,77,-6,-1,-92,-54,52,-24,71,33,-46, 
  /* [64][0][][] */ 3,20,17,-9,70,-120,42,96,-96,-8,-124,-14,6,127,69,37, 
  /* [65][0][][] */ -101,0,-53,-11,37,8,-59,-40,-48,-97,69,-64,-127,70,-37,95, 
  /* [66][0][][] */ -16,86,-4,66,-47,127,12,2,-100,27,-59,19,-43,84,75,-94, 
  /* [67][0][][] */ 1,37,-82,-36,-4,-88,67,-127,-12,-18,77,85,-61,-29,-69,-94, 
  /* [68][0][][] */ 92,-127,-8,32,-16,-10,73,32,30,-23,27,47,-12,67,-17,-59, 
  /* [69][0][][] */ 38,27,105,-23,-3,-52,-1,35,-14,112,46,35,41,-7,72,-127, 
  /* [70][0][][] */ 50,60,22,-76,86,17,-51,-53,-127,-105,-27,35,-40,52,-101,9, 
  /* [71][0][][] */ -34,-127,-9,-6,37,-46,-9,30,-55,48,-69,-87,22,35,20,16, 
  /* [72][0][][] */ -32,49,36,-41,-99,13,-103,-69,-57,36,8,18,2,55,-127,19, 
  /* [73][0][][] */ -50,-31,-37,-82,31,-92,-14,-23,115,22,75,-29,6,-76,-127,99, 
  /* [74][0][][] */ -6,12,-23,89,-109,0,110,20,46,41,14,106,127,51,-24,33, 
  /* [75][0][][] */ -27,44,-26,-4,-60,127,-9,10,-47,10,5,23,-19,27,9,-43, 
  /* [76][0][][] */ -67,67,-64,62,-109,-31,-8,36,76,34,-106,-90,68,-92,-127,72, 
  /* [77][0][][] */ 65,127,-60,107,24,61,82,22,17,-12,105,-19,58,47,57,42, 
  /* [78][0][][] */ 27,-25,16,-43,48,-127,41,-56,28,51,115,-16,7,4,-20,112, 
  /* [79][0][][] */ -53,42,-18,15,27,-47,-55,28,-101,-24,51,9,98,30,-127,-70, 
  /* [80][0][][] */ -62,38,68,27,27,27,10,-127,-96,34,10,-62,24,-46,53,88, 
  /* [81][0][][] */ 62,54,-31,25,8,-18,45,99,-88,79,-37,-9,-17,43,127,111, 
  /* [82][0][][] */ 9,86,-59,-13,51,-127,94,-56,29,55,-75,58,124,23,78,7, 
  /* [83][0][][] */ 7,-40,15,46,-13,48,-30,-108,64,-69,127,2,66,-55,-32,-85, 
  /* [84][0][][] */ -118,-104,-45,-16,-5,71,125,15,85,55,103,119,84,127,-81,0, 
  /* [85][0][][] */ 127,19,74,-71,61,-7,-14,39,36,103,-117,-18,-38,5,61,10, 
  /* [86][0][][] */ -105,80,-40,-11,9,91,23,21,60,34,127,-38,-61,46,-1,-30, 
  /* [87][0][][] */ 23,-69,26,-42,52,-127,24,-24,58,-24,52,-33,57,-28,-40,61, 
  /* [88][0][][] */ -47,46,49,19,54,-59,0,13,-29,-27,75,-44,52,99,94,-127, 
  /* [89][0][][] */ -2,20,9,43,-37,109,11,37,-24,12,-49,39,-2,107,41,-127, 
  /* [90][0][][] */ 15,-86,2,-16,126,47,21,45,14,-127,-109,-37,-49,-45,-90,23, 
  /* [91][0][][] */ -22,115,-32,-6,-50,-46,-56,-12,-84,17,-8,-93,-127,-44,62,56, 
  /* [92][0][][] */ 34,59,52,44,-127,-67,19,-6,-32,30,-7,-7,-49,-35,19,-1, 
  /* [93][0][][] */ 27,-79,-127,121,-67,-127,-30,80,76,89,-22,4,-71,40,61,-30, 
  /* [94][0][][] */ 70,35,94,-11,18,-96,-9,26,7,126,16,42,0,26,127,20, 
  /* [95][0][][] */ -23,-30,20,-31,125,-1,70,51,12,-48,-127,-62,72,32,-98,17, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0017624805914238095, 0.001696928171440959, 0.0031435622368007898, 0.0040873726829886436, 0.0027221885975450277, 0.0011282451450824738, 0.0037393285892903805, 0.003531215712428093, 0.0015827752649784088, 0.0037588789127767086, 0.0014130824711173773, 0.0021494149696081877, 0.0031850843224674463, 0.0057854452170431614, 0.0017692081164568663, 0.0024098048452287912, 0.0018085524206981063, 0.0024675470776855946, 0.0030006140004843473, 0.0018042498268187046, 0.0029331792611628771, 0.0013274338562041521, 0.0033023098949342966, 0.0022700096014887094, 0.0014925568830221891, 0.0029276225250214338, 0.003102797782048583, 0.004083667416125536, 0.0016329200007021427, 0.0024802521802484989, 0.0032465504482388496, 0.0030643926002085209, 0.0023673989344388247, 0.0016301022842526436, 0.0027598966844379902, 0.0020156775135546923, 0.0026890798471868038, 0.0033852262422442436, 0.0018979890737682581, 0.0020654725376516581, 0.0010671098716557026, 0.0022944703232496977, 0.0043302946723997593, 0.0025017685256898403, 0.0022081106435507536, 0.0014530649641528726, 0.0019646321889013052, 0.0021032276563346386, 0.0036084721796214581, 0.0027350473683327436, 0.0047286325134336948, 0.0025385881308466196, 0.0020648783538490534, 0.0020773103460669518, 0.001490816124714911, 0.0030180264730006456, 0.003365745535120368, 0.0012198470067232847, 0.0023178374394774437, 0.004629943985491991, 0.0014965095324441791, 0.00095097959274426103, 0.0031754057854413986, 0.0041192476637661457, 0.0013134795008227229, 0.0012033390812575817, 0.0025083804503083229, 0.0029713055118918419, 0.002299504354596138, 0.0026758946478366852, 0.0041048964485526085, 0.003215092234313488, 0.0026411712169647217, 0.0020838242489844561, 0.0031194884795695543, 0.0027256431058049202, 0.0029476853087544441, 0.0016748603666201234, 0.0047362344339489937, 0.0022596931084990501, 0.0033677469473332167, 0.0031893723644316196, 0.0021937487181276083, 0.0021303549874573946, 0.0029644416645169258, 0.0013534355675801635, 0.0017001322703436017, 0.0036240068729966879, 0.0045484215952455997, 0.0035960576497018337, 0.001967164920642972, 0.0011730992700904608, 0.0024009535554796457, 0.002698573051020503, 0.0025026299990713596, 0.0022446862421929836, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -8738, 7878, -15511, -2535, 14032, -15115, -44233, -2825, -4356, 1716, -14593, -16030, 3998, -14063, -10356, -843, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00012549807433970273, 0.00013583582767751068, 9.9188378953840584e-05, 0.00012217594485264271, 7.8653225500602275e-05, 0.0001648787729209289, 8.436404459644109e-05, 7.4121162469964474e-05, 7.590656605316326e-05, 0.00010172505426453426, 0.00016419375606346875, 0.00010020194895332679, 8.1444457464385778e-05, 7.9591380199417472e-05, 9.1186091594863683e-05, 0.00010929489508271217, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 19,57,18,-21,77,70,-42,50,-26,106,14,62,-22,22,-11,55,40,89,72,-61,-56,68,-12,46,53,37,44,53,-51,-54,15,84,-23,8,-76,52,32,-127,-35,9,23,-19,69,-14,2,-63,-47,-4, 
  /* [1][0][][] */ -60,8,-79,-37,7,107,-52,28,12,-32,-24,23,54,-13,-27,-43,-8,-27,2,16,-45,31,-98,-51,-51,-32,45,70,-35,-13,44,-43,0,-71,-9,38,-4,-47,127,-32,-11,32,-63,-5,17,56,33,14, 
  /* [2][0][][] */ 12,-9,35,-35,-40,-86,9,14,127,70,-58,19,93,-40,120,69,-92,-40,-22,43,65,-78,-28,-78,21,-50,36,-91,29,45,-24,17,28,-43,43,53,-57,10,-14,-54,32,23,55,-3,19,-84,88,-43, 
  /* [3][0][][] */ 47,2,-30,-7,47,121,13,-30,16,-57,27,-25,-44,16,10,47,-41,-65,37,-124,-5,-20,-15,5,-53,83,127,64,-8,-60,22,63,74,-3,118,48,-29,-65,21,30,-3,24,15,-4,46,36,-10,-30, 
  /* [4][0][][] */ 77,-35,26,-43,61,53,87,29,64,-15,-109,12,1,-6,9,-16,-80,-101,-9,-105,-11,35,-37,-31,-86,127,-111,91,-42,-40,14,61,21,-29,-1,-56,-26,18,-5,35,-35,-19,5,45,-46,90,-35,-71, 
  /* [5][0][][] */ -8,8,-50,21,-2,45,2,-13,57,56,50,87,65,-34,18,-1,-32,127,-25,42,24,-9,-73,-35,26,-11,-57,-25,-23,40,23,-11,-34,-20,62,16,-53,14,-84,-1,65,-42,32,34,-12,-7,-27,38, 
  /* [6][0][][] */ 69,31,27,75,28,-9,112,-50,-11,17,115,86,46,27,-50,90,57,-44,-38,69,76,-84,-11,74,-66,84,101,3,111,17,-53,38,127,-25,-100,6,108,11,11,-20,46,83,102,-31,99,113,39,-14, 
  /* [7][0][][] */ -114,-23,-29,37,-69,-67,55,37,106,107,-74,-89,-127,14,-3,3,-90,105,0,114,-64,66,26,55,-28,-92,-49,-103,36,34,-27,28,2,16,0,-46,-5,-55,123,27,24,46,17,-3,56,87,-55,-30, 
  /* [8][0][][] */ -3,-104,69,-66,53,-55,97,-21,-25,-94,4,-4,-63,26,52,39,-15,8,-59,79,18,48,-8,27,56,4,-81,-43,-115,-31,-59,-94,-4,-57,-11,63,-16,24,123,46,28,3,79,127,8,-52,-56,44, 
  /* [9][0][][] */ 30,-34,13,-49,49,86,-49,52,-8,-44,-19,-10,27,-54,101,-11,20,-127,67,58,-53,12,63,0,-13,-90,-13,98,57,59,-28,-41,-43,58,14,123,-15,-60,-40,-35,-49,15,48,92,62,76,-51,24, 
  /* [10][0][][] */ -16,12,-24,-4,8,15,-61,-58,39,40,70,-3,-36,-3,46,-57,-75,127,-24,53,-8,-13,2,1,-46,44,3,84,40,17,-13,-12,61,-26,-12,17,-14,-29,-43,17,-86,-20,16,-19,7,36,34,33, 
  /* [11][0][][] */ -23,62,-25,48,35,71,-7,21,0,3,-127,-66,87,10,-26,-44,15,32,-44,-49,-4,-19,123,-16,50,5,-9,48,8,21,-9,72,44,20,-57,0,48,83,112,8,36,-21,93,-19,-46,-28,112,12, 
  /* [12][0][][] */ -66,-10,36,12,-49,-48,23,-4,-32,-31,-127,-2,48,-83,35,32,32,104,78,-124,-28,42,-25,-70,-7,-7,24,-29,9,2,-16,83,68,72,36,-29,-59,-25,39,14,-23,26,69,5,49,-5,-41,-40, 
  /* [13][0][][] */ -63,-107,-63,-114,15,39,54,-37,-113,6,109,-76,30,59,100,11,99,12,18,-65,68,-89,127,24,-74,10,-16,8,-13,-117,-122,28,62,-12,-80,78,31,-50,71,-59,8,87,87,10,78,-38,109,-37, 
  /* [14][0][][] */ 63,17,-48,10,-18,22,-71,-25,-33,38,64,34,-10,-48,42,-42,49,-92,45,-4,90,-58,47,21,-15,103,-74,18,-51,-44,-76,22,124,65,99,-12,-73,0,-8,43,-33,-11,127,-13,-24,-22,-47,47, 
  /* [15][0][][] */ -58,9,32,19,78,-9,7,22,35,57,-8,53,47,-18,-39,-17,9,31,1,-27,21,-39,-51,-32,49,-52,-27,62,-22,12,14,13,-46,-5,127,-17,-86,22,44,-13,-46,-22,17,-2,-37,-31,-15,5, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0053336680866777897, 0.0057730227708816528, 0.0042155059054493904, 0.0051924772560596466, 0.0033427621237933636, 0.0070073478855192661, 0.0035854717716574669, 0.0031501494813710451, 0.0032260289881378412, 0.0043233148753643036, 0.0069782347418367863, 0.0042585828341543674, 0.0034613893367350101, 0.0033826334401965141, 0.0038754087872803211, 0.0046450328081846237, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 15711, -1278, 21906, 530, 17651, -1429, 48826, 602, 10782, 34924, 1885, 25616, 2016, 7318, 58021, 24190, 1514, -7206, 5117, 52482, 2459, 12834, 2316, 20662, 13321, 50482, 1877, 159, -12611, 7685, 15084, 182, 1295, -5637, 458, 15885, 9434, 29561, -2636, 14994, 22606, 1241, 1291, 14536, 11201, 1471, 53549, 18332, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00010849104000953957, 0.00015644362429156899, 5.9884168877033517e-05, 0.00013007585948798805, 0.00012181404599687085, 0.00018597155576571822, 4.3831209040945396e-05, 0.00019707040337380022, 9.9157579825259745e-05, 5.4822128731757402e-05, 7.9588819062337279e-05, 0.00011609379725996405, 8.0290679761674255e-05, 8.8334119936916977e-05, 2.7208241590415128e-05, 0.00011443043331382796, 9.7376032499596477e-05, 7.7385826443787664e-05, 0.00015201854694169015, 3.8726029742974788e-05, 7.2139519033953547e-05, 9.2767688329331577e-05, 0.00010224994912277907, 0.00013241710257716477, 9.6520896477159113e-05, 4.2015577491838485e-05, 6.5359163272660226e-05, 6.5771419031079859e-05, 0.0001879281917354092, 0.0001576085778651759, 7.9873294453136623e-05, 0.00082788162399083376, 0.00020550181216094643, 0.00015333968622144312, 0.00013437426241580397, 8.027446165215224e-05, 0.00019478508329484612, 4.728221392724663e-05, 9.9963923275936395e-05, 0.00012578869063872844, 6.2743310991209e-05, 0.00023179587151389569, 0.00029531051404774189, 5.6421780755044892e-05, 0.00013380458403844386, 5.9491045249160379e-05, 3.322340126032941e-05, 6.5018088207580149e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -47,84,-116,68,-80,34,-121,66,-103,-87,86,-120,23,-14,-75,-80,94,113,110,-111,127,-76,119,-113,-34,-72,45,87,-62,-48,-110,-27,22,-127,60,-94,-9,-60,67,-22,-63,-24,10,-102,108,0,-96,-36, -121,92,-116,74,-6,127,-91,102,-94,-127,127,-109,127,-61,-84,-57,62,113,118,-127,77,-127,104,-94,-127,-127,72,127,88,-37,-127,-10,46,-121,107,-57,3,-127,98,-93,-114,127,-13,-83,-63,68,-127,-81, -86,70,7,26,-28,61,-68,-79,-50,-59,16,-31,48,-9,39,-35,19,86,88,-70,-8,-44,65,-127,-11,-82,11,23,110,-61,4,-8,-4,-61,67,-55,-10,-24,75,-83,-127,-91,-5,18,-111,11,-96,-7, 
  /* [0][1][][] */ -127,30,-116,127,3,72,-91,92,-127,-81,45,-79,75,-127,-84,-52,100,52,-32,-71,109,-9,127,-103,-69,-85,72,39,-116,-40,-63,16,49,72,107,-80,-119,-76,53,-16,-24,-95,25,-127,108,38,-108,-14, -100,121,-127,98,-101,59,-106,127,-127,-122,83,-127,97,-88,-47,-20,127,127,-58,-59,67,-96,91,-56,-118,-103,127,24,52,-43,-86,41,69,79,127,-122,-127,-52,127,-127,-65,118,8,-120,-94,68,-96,-127, -13,55,-96,5,-98,14,-127,58,-96,7,32,-51,103,-48,-102,13,73,53,-68,-9,-5,-28,28,-65,-68,-122,45,51,127,-33,21,60,17,66,81,-5,-35,-29,85,-88,-15,-91,10,-61,-123,127,9,-89, 
  /* [0][2][][] */ -73,61,-14,68,-60,84,-101,-93,-1,-11,41,-54,94,-44,-95,-90,26,36,-127,-77,78,-23,91,-45,-88,-58,77,-2,-64,-87,-101,61,96,33,80,-111,-56,-61,23,-8,-58,-68,127,-95,86,55,-55,-63, -50,70,-95,49,-127,46,-109,-24,-28,-52,51,-80,40,-18,-127,-127,76,8,-91,-33,30,-26,19,-21,-23,-37,44,53,25,-127,-55,127,127,95,60,-127,-37,-77,37,-6,-85,76,94,-106,-89,71,-91,-41, 1,127,-11,4,-63,-5,-112,-35,-31,12,28,20,-1,43,35,-22,71,35,-113,60,23,-44,-25,-55,-6,-45,24,77,112,-14,38,32,41,62,-13,51,28,-62,57,-46,-32,-87,42,-44,-127,100,-25,-28, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0046108691021800041, 0.00664885388687253, 0.002545077120885253, 0.0055282237008213997, 0.0051770969294011593, 0.0079037910327315331, 0.0018628262914717197, 0.0083754919469356537, 0.0042141969315707684, 0.0023299404419958591, 0.0033825247082859278, 0.004933986347168684, 0.0034123538061976433, 0.0037541999481618404, 0.0011563502484932542, 0.0048632933758199215, 0.0041384813375771046, 0.0032888974528759718, 0.0064607881940901279, 0.0016458563040941954, 0.0030659295152872801, 0.003942626528441906, 0.0043456228449940681, 0.0056277266703546047, 0.0041021378710865974, 0.0017856620252132416, 0.0027777643408626318, 0.0027952853124588728, 0.0079869478940963745, 0.0066983643919229507, 0.0033946149051189423, 0.035184968262910843, 0.0087338266894221306, 0.0065169362351298332, 0.005710905883461237, 0.0034116646274924278, 0.0082783661782741547, 0.0020094939973205328, 0.0042484668083488941, 0.0053460192866623402, 0.0026665907353162766, 0.0098513243719935417, 0.012550696730613708, 0.0023979255929589272, 0.0056866947561502457, 0.0025283694267272949, 0.0014119945699349046, 0.0027632687706500292, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 2731, -1828, 1582, -2291, 9402, -1775, 6810, -3311, 1581, 408, 2297, 5313, 206, -807, 15, 9063, -2662, 5231, 6902, 843, -1277, 1613, -1360, 7205, 2081, 3975, 1600, -1581, 14053, -1051, 2492, -4172, -1635, 6126, -1764, 2130, 3056, 650, 515, 6959, 2785, 20412, -2732, 1116, 11581, -74, 1471, 3063, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00019345397595316172, 0.00022978094057179987, 0.00021166318038012832, 0.00021709084103349596, 0.00010378874139860272, 0.00013612296606879681, 0.00011993631051154807, 0.00018057202396448702, 0.00023496492940466851, 0.00028989714337512851, 0.00020257990399841219, 0.00014712671691086143, 0.00034590033465065062, 0.00026140225236304104, 0.00025512880529277027, 0.00010807231592480093, 0.00020794877491425723, 0.0001671555801294744, 0.00014808574633207172, 0.00026076260837726295, 0.00021428818581625819, 0.00025396063574589789, 0.00018303548858966678, 0.00012873105879407376, 0.0002057464444078505, 0.00014401708904188126, 0.00019615994824562222, 0.00020096448133699596, 7.0346191932912916e-05, 0.0002109851484419778, 0.00016870246327016503, 0.00012829454499296844, 0.00017333430878352374, 0.00012946678907610476, 0.0002034926728811115, 0.00023639379651285708, 0.00018922110029961914, 0.00025885624927468598, 0.0002022917615249753, 0.00012686447007581592, 0.0002017340884776786, 5.3263149311533198e-05, 0.00017531360208522528, 0.00031800029682926834, 8.6519590695388615e-05, 0.00022737456311006099, 0.00030349474400281906, 0.00022794771939516068, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 49,27,127,-24,62,73,-53,-51, 
  /* [1][0][][] */ 13,-60,-127,15,45,16,20,10, 
  /* [2][0][][] */ -127,-8,-49,-24,50,13,-51,-39, 
  /* [3][0][][] */ 39,57,127,-67,11,-88,0,-6, 
  /* [4][0][][] */ -127,40,-42,-21,36,29,-67,-76, 
  /* [5][0][][] */ -127,40,-61,-25,26,47,-95,-117, 
  /* [6][0][][] */ -61,-126,-127,83,108,14,8,89, 
  /* [7][0][][] */ -42,-127,-44,-36,-68,-47,54,64, 
  /* [8][0][][] */ 84,51,-7,13,82,-58,-127,5, 
  /* [9][0][][] */ -43,44,-33,74,-61,-23,127,-40, 
  /* [10][0][][] */ -25,121,45,68,127,-15,-1,79, 
  /* [11][0][][] */ -90,-42,-23,-4,-106,113,127,-24, 
  /* [12][0][][] */ 54,31,-127,35,-6,-34,-47,-3, 
  /* [13][0][][] */ 74,-26,-72,7,5,-127,-31,-13, 
  /* [14][0][][] */ 43,-94,39,-4,127,-112,-85,15, 
  /* [15][0][][] */ -63,-51,-7,127,93,53,-70,28, 
  /* [16][0][][] */ 102,24,-35,-9,85,-93,-127,-24, 
  /* [17][0][][] */ 66,127,59,99,45,63,25,-102, 
  /* [18][0][][] */ 10,-27,24,12,127,37,44,-7, 
  /* [19][0][][] */ 4,127,41,-2,-113,26,31,-27, 
  /* [20][0][][] */ -42,24,88,-121,9,63,-43,127, 
  /* [21][0][][] */ -96,74,51,-127,41,51,4,114, 
  /* [22][0][][] */ -73,-59,-85,6,-100,79,127,-31, 
  /* [23][0][][] */ 116,18,-127,48,13,-18,-84,-15, 
  /* [24][0][][] */ -56,50,10,33,-31,73,-127,75, 
  /* [25][0][][] */ -109,-60,-127,26,-41,-89,56,106, 
  /* [26][0][][] */ 48,4,-83,-40,127,-15,124,-57, 
  /* [27][0][][] */ 127,-68,12,74,9,39,-6,101, 
  /* [28][0][][] */ 15,112,32,-90,116,-127,48,-78, 
  /* [29][0][][] */ -7,-27,-28,-47,-71,-9,127,-24, 
  /* [30][0][][] */ 25,-127,-65,-93,-116,-20,49,-74, 
  /* [31][0][][] */ 9,20,-24,-34,-127,-21,-14,-19, 
  /* [32][0][][] */ 28,-42,-35,67,-24,-79,127,-117, 
  /* [33][0][][] */ 73,127,27,126,79,29,-98,-39, 
  /* [34][0][][] */ -119,-24,127,8,-22,85,86,28, 
  /* [35][0][][] */ -18,58,127,-13,-62,-49,-45,22, 
  /* [36][0][][] */ -101,26,102,-24,-25,127,73,12, 
  /* [37][0][][] */ -32,-54,-7,-127,-28,-76,78,44, 
  /* [38][0][][] */ 36,-12,86,-51,36,47,-127,-1, 
  /* [39][0][][] */ -75,90,-127,-56,-28,-20,-11,90, 
  /* [40][0][][] */ 45,-38,35,36,12,13,7,127, 
  /* [41][0][][] */ 19,56,127,10,6,106,-69,69, 
  /* [42][0][][] */ 23,-76,-86,-19,-127,9,29,-92, 
  /* [43][0][][] */ -25,-53,10,-43,127,-23,22,20, 
  /* [44][0][][] */ 1,127,95,-6,-7,36,-95,19, 
  /* [45][0][][] */ -31,50,34,71,-109,65,-127,20, 
  /* [46][0][][] */ -19,-28,55,36,-127,-97,-26,4, 
  /* [47][0][][] */ -15,54,47,-88,-127,37,-47,39, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022239971440285444, 0.0026416212785989046, 0.002433334942907095, 0.0024957326240837574, 0.001193182310089469, 0.001564905047416687, 0.001378818997181952, 0.0020759028848260641, 0.0027012177743017673, 0.0033327329438179731, 0.0023289110977202654, 0.0016914069419726729, 0.0039765601977705956, 0.0030051481444388628, 0.0029330269899219275, 0.0012424273882061243, 0.0023906331043690443, 0.0019216639921069145, 0.0017024321714416146, 0.0029977946542203426, 0.0024635125882923603, 0.0029195973183959723, 0.0021042234729975462, 0.0014799257041886449, 0.0023653146345168352, 0.0016556578921154141, 0.0022551056463271379, 0.0023103398270905018, 0.00080871809041127563, 0.0024255400057882071, 0.0019394472474232316, 0.0014749073889106512, 0.0019926961977034807, 0.001488383742980659, 0.0023394045419991016, 0.0027176444418728352, 0.0021753348410129547, 0.0029758785385638475, 0.0023255986161530018, 0.001458466867916286, 0.0023191873915493488, 0.00061232701409608126, 0.0020154507365077734, 0.003655813867226243, 0.00099465169478207827, 0.0026139570400118828, 0.0034890542738139629, 0.0026205461472272873, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -3011, 4804, 19756, -3013, 3191, -11582, 11623, -10669, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.5464864494279027e-05, 0.00010357694554841146, 0.00017987929459195584, 0.00012472301023080945, 0.00012436308315955102, 0.00012761283142026514, 0.00010957616177620366, 9.1936824901495129e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -68,-67,-41,-75,11,-16,35,105,-98,-98,-32,11,-30,14,-70,62,-74,8,4,127,76,-41,61,113,51,73,25,-4,-92,-68,-31,-62,-74,68,33,-72,73,-6,108,-32,45,-21,-5,-107,39,-42,-12,-82, 
  /* [1][0][][] */ -20,38,-32,-52,-75,44,-44,-62,-53,55,-15,23,38,58,-48,-23,-10,-118,88,-46,127,-14,-13,45,58,-18,-97,19,27,-22,67,5,-47,-24,9,-9,16,67,-22,-37,50,20,9,-15,88,-13,-28,56, 
  /* [2][0][][] */ -16,-33,95,-3,65,-31,13,11,-41,-6,-12,47,9,-32,-38,-127,-38,-83,-11,20,-67,14,-23,-19,-35,8,-16,-51,-36,2,-32,-12,2,0,35,-11,13,-42,-43,17,15,-31,43,-41,-27,-45,-51,-33, 
  /* [3][0][][] */ 52,23,28,-3,5,-24,1,38,-41,-18,50,-54,-74,41,-30,44,51,36,-7,6,-74,-61,127,7,6,-12,-59,-38,-61,43,81,-77,-8,-91,2,36,-9,-79,-17,53,-44,-60,39,-20,-107,-71,65,-23, 
  /* [4][0][][] */ 21,-8,55,-39,-9,-18,-22,-17,-70,-8,-28,-1,29,-60,32,-105,55,47,-5,-34,22,11,58,39,8,-4,42,-36,14,17,-127,-27,-27,-21,8,6,32,-34,27,0,-52,-22,-57,10,-26,-102,12,18, 
  /* [5][0][][] */ 16,-32,51,21,15,10,26,-26,-76,-31,-62,26,13,2,8,-55,80,68,15,-23,90,-59,127,-92,-36,36,-18,27,7,13,-54,-44,-5,-52,-20,2,35,27,62,8,-74,10,34,25,48,-14,66,-8, 
  /* [6][0][][] */ -28,37,-92,55,47,22,37,21,-7,2,36,-86,-65,-33,-19,38,-127,20,3,58,-3,36,-110,-89,-1,-9,8,64,-37,-52,-33,-8,26,61,-44,-14,-23,-7,50,13,68,61,-98,-34,-41,77,-57,-26, 
  /* [7][0][][] */ 43,86,-97,32,-23,56,127,56,-19,62,-116,13,-72,-10,-50,-105,84,35,111,117,94,-4,105,58,111,121,-51,86,-68,23,-25,-48,44,-56,-23,22,4,45,-70,118,-122,56,-7,-60,77,-12,41,-44, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0032072567846626043, 0.0044020200148224831, 0.0076448698528110981, 0.0053007281385362148, 0.0052854311652481556, 0.0054235453717410564, 0.0046569867990911007, 0.0039073149673640728, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -1297, 8481, -551, -351, 3764, -345, 2163, -1162, -2507, -939, -6427, -339, -5128, -144, -1844, 6343, 13831, 1299, 2180, 838, -6230, -1833, 11670, -8601, -8505, -464, 8442, 3574, -1234, 387, -6742, 7209, 10058, 217, 4328, -387, 110, 1839, 13408, 1253, 3354, 2453, 1604, 6243, 7170, 7890, -446, -3816, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031241399119608104, 0.00014333480794448406, 0.00037344740121625364, 0.00012237663031555712, 0.00016360076551791281, 0.00021215125161688775, 0.00026895198971033096, 0.00027794859488494694, 0.00017332014977000654, 0.00014405696128960699, 0.00016807994688861072, 0.00088726601097732782, 0.00039592268876731396, 0.00060407904675230384, 0.00040323712164536119, 0.00055274041369557381, 0.00012091904500266537, 5.3003652283223346e-05, 0.00029992085183039308, 0.00026356257149018347, 0.00032715793349780142, 0.0002353842428419739, 0.00016576108464505523, 0.00039691210258752108, 0.00016739085549488664, 0.00039156561251729727, 0.00039615671266801655, 0.00023916285135783255, 0.00015045485633891076, 0.00034201942617073655, 0.00015435232489835471, 0.0001705540344119072, 9.5031798991840333e-05, 0.00025053159333765507, 0.00012285921548027545, 0.00034122486249543726, 0.0014056927757337689, 0.00023397740733344108, 0.0001081816662917845, 0.00016617259825579822, 0.00033489885390736163, 0.00010095682955579832, 0.00034442232572473586, 0.00017552531789988279, 0.00018123442714568228, 9.9912431323900819e-05, 9.6726384072098881e-05, 0.00022053229622542858, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 14,-68,14,37,-30,-125,-38,71,-48,9,28,6,50,-24,-17,-3,99,24,28,-34,14,0,-111,40,46,-19,-35,-127,-62,63,-50,-127,1,10,-97,-63,-11,-86,0,-57,0,111,28,-1,-43,45,127,-46, -127,-113,-18,127,-83,89,-103,127,4,39,-35,-3,51,21,-14,-35,-55,70,-12,27,-16,127,-32,127,127,-51,-69,-18,87,-127,-38,-69,35,1,-18,-127,16,-13,-73,-40,-109,-33,-82,-109,22,34,36,127, -3,-27,21,34,-36,24,17,13,-13,-64,7,18,-3,-10,-16,10,-89,69,-79,-72,-20,-1,127,39,-7,31,5,-66,29,13,-17,-9,-14,-35,0,33,4,-30,8,62,22,-76,49,-27,-47,49,-36,26, 
  /* [0][1][][] */ -9,-17,-23,8,26,-127,127,-48,-15,4,89,42,127,-14,1,-46,-45,-31,21,15,78,-46,61,33,-11,127,-98,-86,127,-79,33,-64,-74,19,-102,37,10,-107,-49,1,119,127,17,-127,-127,-73,-8,85, 91,-127,127,10,127,54,-59,-47,19,127,127,-127,-69,127,127,127,127,127,86,127,127,97,-17,14,72,-118,-127,127,27,127,127,34,-127,127,127,123,-127,127,-127,-116,33,0,-127,-25,126,-127,-14,72, 44,58,-35,7,-63,72,-108,67,52,-93,33,73,-14,-12,7,-62,-25,51,-127,-6,-7,-85,-51,14,58,6,-19,62,-83,-33,27,-21,-14,-7,112,-26,31,-30,1,-88,96,-34,44,35,-105,86,23,-68, 
  /* [0][2][][] */ -5,66,8,-32,11,-96,-6,6,24,-9,32,-5,5,-40,7,-23,-125,14,27,-77,7,-28,116,-5,-26,-1,25,-59,9,12,56,55,-43,-4,-98,44,-3,-30,17,23,-37,2,4,-16,-57,-2,-20,40, 21,7,-33,-26,23,32,126,-124,127,-52,-57,0,-47,-39,-8,-75,-50,116,-22,10,25,13,-55,-31,-20,52,80,15,-116,18,-31,21,-76,-15,-38,24,50,-40,7,127,-127,-28,-14,35,38,41,-9,-98, 3,48,6,-11,-14,-25,3,-69,2,0,-63,4,35,-30,-4,5,26,71,-40,-52,-9,-30,-73,-3,35,-13,29,-36,-5,8,2,-18,-4,-34,-13,-31,-15,-23,28,-12,-27,-22,0,3,-43,33,57,-13, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013277594000101089, 0.0060917292721569538, 0.01587151363492012, 0.0052010067738592625, 0.0069530322216451168, 0.009016428142786026, 0.011430459097027779, 0.011812815442681313, 0.0073661059141159058, 0.0061224210076034069, 0.0071433978155255318, 0.03770880401134491, 0.01682671345770359, 0.025673359632492065, 0.017137577757239342, 0.023491466417908669, 0.0051390593871474266, 0.002252655103802681, 0.01274663582444191, 0.011201409623026848, 0.013904212042689323, 0.010003830306231976, 0.0070448457263410091, 0.016868764534592628, 0.0071141109801828861, 0.016641538590192795, 0.016836659982800484, 0.010164421051740646, 0.0063943313434720039, 0.014535825699567795, 0.0065599735826253891, 0.0072485464625060558, 0.0040388512425124645, 0.010647593066096306, 0.0052215168252587318, 0.014502055943012238, 0.059741944074630737, 0.0099440393969416618, 0.0045977206900715828, 0.0070623350329697132, 0.014233200810849667, 0.0042906650342047215, 0.01463794894516468, 0.007459825836122036, 0.0077024633064866066, 0.0042462782002985477, 0.0041108713485300541, 0.0093726227059960365, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 2898, 6941, 6460, 995, 2915, -1021, 6263, 13451, 2247, -591, 4345, -1431, 14753, -1415, 4697, 18471, -493, 2590, 716, 2976, 5166, 5759, 430, 26153, 5517, 3148, 17280, 3987, 3850, 5217, 2863, 2406, 251, 2013, -1550, 623, -2755, -917, 2173, 2072, 9602, 1864, 2316, 9065, 5641, 3127, 3012, 4837, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00019786065968219191, 0.00011949556937906891, 0.00012780008546542376, 0.00022494469885714352, 0.00015794477076269686, 0.00026359257753938437, 0.00015042666927911341, 7.2811781137716025e-05, 0.0002019780658883974, 0.0003066256467718631, 0.00019468161917757243, 0.00025463811471126974, 6.8533998273778707e-05, 0.00025196725619025528, 0.00013284268788993359, 6.0369937273208052e-05, 0.00033292884472757578, 0.00017165980534628034, 0.00023896567290648818, 0.00021077707060612738, 0.00016279293049592525, 0.00015077315038070083, 0.00021392077906057239, 4.0508464735466987e-05, 0.00013449980178847909, 0.00017393520101904869, 6.0373040469130501e-05, 0.00015858405095059425, 0.00018586195074021816, 0.0001535786286694929, 0.00019689860346261412, 0.0002397839562036097, 0.00026883071404881775, 0.00020131254859734327, 0.00015695962065365165, 0.00021984984050504863, 0.00019927519315388054, 0.00024546994245611131, 0.00024692868464626372, 0.00019986950792372227, 9.6023708465509117e-05, 0.00024149958335328847, 0.0002631205425132066, 9.053187386598438e-05, 0.0001357619185000658, 0.00021278976055327803, 0.00025168986758217216, 0.00015723859542049468, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 12,127,-66,-55,-55,126,-25,-13, 
  /* [1][0][][] */ 127,-122,46,-114,-64,84,-111,-91, 
  /* [2][0][][] */ -39,101,127,30,77,4,50,8, 
  /* [3][0][][] */ 87,39,-80,10,16,-102,-127,6, 
  /* [4][0][][] */ -48,90,60,-38,-13,127,115,46, 
  /* [5][0][][] */ 16,37,-127,-49,17,61,21,-31, 
  /* [6][0][][] */ -42,114,29,112,62,56,15,-127, 
  /* [7][0][][] */ 127,-33,6,30,41,-21,40,32, 
  /* [8][0][][] */ 104,97,25,75,107,94,112,-127, 
  /* [9][0][][] */ 39,127,-47,-28,8,79,-21,63, 
  /* [10][0][][] */ -56,-31,27,-49,-5,-11,-46,127, 
  /* [11][0][][] */ 15,-59,-127,12,-12,-7,60,3, 
  /* [12][0][][] */ -19,-99,-69,-46,-127,59,14,3, 
  /* [13][0][][] */ -12,3,-127,99,-106,-45,9,-19, 
  /* [14][0][][] */ -52,-37,-127,8,40,-2,0,-61, 
  /* [15][0][][] */ 6,-55,-127,50,-87,-27,-49,15, 
  /* [16][0][][] */ 127,-59,-18,42,-44,0,47,81, 
  /* [17][0][][] */ -7,127,118,-11,-35,-34,-10,-30, 
  /* [18][0][][] */ 5,-127,63,32,-28,-77,16,-96, 
  /* [19][0][][] */ 127,-22,-28,37,-84,33,48,117, 
  /* [20][0][][] */ -48,-127,66,77,-28,-90,5,-64, 
  /* [21][0][][] */ -8,-63,-8,-14,127,8,25,7, 
  /* [22][0][][] */ -114,38,-113,39,108,63,-81,-127, 
  /* [23][0][][] */ -77,-74,62,-21,-92,127,118,-52, 
  /* [24][0][][] */ -33,34,44,-36,-34,127,77,-3, 
  /* [25][0][][] */ -43,-57,-127,-35,-59,-9,-5,-52, 
  /* [26][0][][] */ 14,34,-13,127,-87,45,-67,-24, 
  /* [27][0][][] */ 15,-127,18,76,-5,-35,7,-124, 
  /* [28][0][][] */ 11,120,63,13,127,-40,-32,-50, 
  /* [29][0][][] */ 111,-16,-71,47,2,-28,-127,-16, 
  /* [30][0][][] */ 76,-3,104,-127,52,-1,13,-4, 
  /* [31][0][][] */ 36,-42,9,77,-8,39,25,127, 
  /* [32][0][][] */ -127,-107,-45,-100,-51,77,55,78, 
  /* [33][0][][] */ -4,41,57,-30,50,127,-118,75, 
  /* [34][0][][] */ -8,127,-106,-117,64,31,-103,106, 
  /* [35][0][][] */ 20,-127,25,85,-55,-52,14,-104, 
  /* [36][0][][] */ -40,-21,-125,-10,-127,-64,-3,-9, 
  /* [37][0][][] */ -49,-127,58,61,-43,-97,-36,-3, 
  /* [38][0][][] */ -48,13,72,-85,-127,-81,-63,92, 
  /* [39][0][][] */ 51,-121,55,127,-8,-36,-58,-49, 
  /* [40][0][][] */ 38,56,-6,102,-127,-45,-120,24, 
  /* [41][0][][] */ 63,127,-91,-118,26,16,-30,7, 
  /* [42][0][][] */ -6,-34,-11,24,127,14,40,37, 
  /* [43][0][][] */ 127,37,95,33,-92,-15,43,115, 
  /* [44][0][][] */ 51,50,-2,-4,52,-94,-127,33, 
  /* [45][0][][] */ 60,1,19,-23,70,-127,-15,-74, 
  /* [46][0][][] */ 55,-32,1,127,69,30,29,92, 
  /* [47][0][][] */ -59,-65,60,70,-48,-1,127,-40, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0033394009806215763, 0.0020167911425232887, 0.0021569509990513325, 0.0037965129595249891, 0.0026657190173864365, 0.0044487942941486835, 0.0025388321373611689, 0.0012288837460801005, 0.0034088927786797285, 0.0051750862039625645, 0.0032857467886060476, 0.0042976648546755314, 0.0011566852917894721, 0.0042525874450802803, 0.0022420575842261314, 0.0010188960004597902, 0.0056190197356045246, 0.0028971950523555279, 0.0040331524796783924, 0.0035573982167989016, 0.0027475440874695778, 0.0025446796789765358, 0.0036104563623666763, 0.00068368320353329182, 0.0022700256668031216, 0.0029355981387197971, 0.0010189483873546124, 0.0026765086222440004, 0.0031368923373520374, 0.002592029282823205, 0.0033231638371944427, 0.0040469630621373653, 0.0045372010208666325, 0.0033976605627685785, 0.0026490921154618263, 0.0037105244118720293, 0.0033632749691605568, 0.0041429284028708935, 0.004167548380792141, 0.0033733055461198092, 0.0016206438886001706, 0.0040759188123047352, 0.0044408272951841354, 0.0015279552899301052, 0.0022913271095603704, 0.0035913675092160702, 0.0042479056864976883, 0.0026538006495684385, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 4169, 10357, -5307, 7402, -263, 4450, -13024, -19744, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0001748672075336799, 0.00013825431233271956, 0.00012280339433345944, 0.00011888160952366889, 0.00013799330918118358, 0.00013836131256539375, 0.00017982475401367992, 0.00010994173499057069, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -43,-8,45,37,-42,-23,4,5,-54,-4,-70,-55,-18,-66,-10,-29,58,-42,59,48,-12,35,-32,13,3,-37,68,-20,-8,-1,15,10,97,39,55,-127,12,7,-5,-40,15,-10,50,50,46,10,40,3, 
  /* [1][0][][] */ -4,29,57,-38,-12,65,-46,-35,17,29,-17,-85,5,92,-20,54,-7,24,5,-37,4,-45,-20,19,-51,16,-9,-106,-16,-1,13,-64,40,59,-32,17,127,-26,-2,45,-18,24,-91,-15,122,-14,-25,-29, 
  /* [2][0][][] */ -16,-16,-65,16,-8,37,17,2,5,46,-9,31,58,-100,13,-65,47,-75,42,48,-28,69,8,15,-4,86,-37,-79,26,-5,20,-89,-51,-104,33,-23,94,20,-21,-52,16,16,72,28,127,10,10,17, 
  /* [3][0][][] */ -17,10,-79,33,22,-34,-77,-100,6,-15,-32,7,0,28,53,84,-18,12,-39,16,10,-100,16,-55,-75,-22,127,-15,-54,-10,-73,26,-3,-81,3,-21,-24,-38,-22,96,-65,-15,7,15,26,8,-45,43, 
  /* [4][0][][] */ -30,-47,-13,3,22,-32,-16,-2,33,-34,61,-79,7,31,8,13,-5,-23,23,-16,-4,-45,7,-23,18,-2,33,44,38,19,-12,23,-17,-17,1,1,-70,82,34,-23,39,-29,-21,-22,-77,12,127,6, 
  /* [5][0][][] */ 21,-26,-11,16,12,-43,14,-127,33,-28,-16,123,-68,44,12,-52,-4,-81,28,6,-25,55,-15,-40,-59,54,-15,0,-42,33,-24,-25,19,31,9,1,-48,-2,-53,-39,7,-44,-50,-17,-22,54,68,4, 
  /* [6][0][][] */ 43,-11,22,-15,-46,-10,-38,12,-32,-6,-39,127,-42,-30,0,51,13,41,54,42,27,-72,-3,6,29,44,-63,5,-3,-42,5,31,15,4,-31,4,15,4,0,-1,0,-29,31,67,5,-31,60,-15, 
  /* [7][0][][] */ -38,8,-20,79,44,25,-1,22,31,14,65,5,122,113,71,52,47,31,-18,9,27,-21,-91,-25,5,9,-24,53,34,-17,-17,-26,15,9,52,-81,-53,38,39,45,-25,48,86,127,-43,-32,-93,63, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0074318563565611839, 0.0058758081868290901, 0.0052191442809998989, 0.0050524682737886906, 0.0058647156693041325, 0.0058803553692996502, 0.0076425517909228802, 0.0046725235879421234, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 7940, 4294, 5231, 2127, -895, -4107, -1017, 41164, 2574, -4501, 10410, 36659, 1719, 3564, -1809, 14697, -5583, 12813, -1049, 13683, 7751, 516, 977, -5879, 19673, 3030, -1674, 16668, -2323, -5613, -8279, 13649, 4231, 1050, -861, 5421, -9945, 20395, -6356, 19979, -4840, -2298, 12208, 914, 2637, -760, -2634, -716, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.6935775470919907e-05, 5.5671709560556337e-05, 0.00018398396787233651, 0.00019907348905690014, 0.00044624879956245422, 0.00014233955880627036, 8.2564387412276119e-05, 7.8774828580208123e-05, 0.00027834775391966105, 7.5173382356297225e-05, 5.1724789955187589e-05, 7.9654550063423812e-05, 0.0001065466130967252, 6.7062203015666455e-05, 0.00037594753666780889, 7.5087904406245798e-05, 7.6600212196353823e-05, 0.00022098256158642471, 0.00017945785657502711, 8.9386405306868255e-05, 0.00010507606930332258, 0.00026830192655324936, 0.00015846634050831199, 0.00027019271510653198, 6.5940177591983229e-05, 0.00011525972513481975, 6.8554290919564664e-05, 8.4438543126452714e-05, 0.00015412313223350793, 0.00054366601398214698, 0.00020245954510755837, 9.6600153483450413e-05, 9.9374345154501498e-05, 0.00016216110088862479, 0.0001674623490544036, 6.0254595155129209e-05, 8.7299034930765629e-05, 2.489025609975215e-05, 0.0001063197196344845, 6.5332103986293077e-05, 0.00010789452062454075, 0.00013328621571417898, 5.1010789320571348e-05, 9.8078962764702737e-05, 7.445680967066437e-05, 0.00028486113296821713, 6.6440457885619253e-05, 0.00038174988003447652, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 5,-94,-7,-21,127,-26,50,-102,-82,-49,32,-43,77,46,45,-122,68,-40,-3,-83,-85,68,61,35,-24,32,83,-7,127,-54,17,-7,-70,-66,39,52,53,90,127,-38,-107,-11,25,20,37,-127,62,60, 0,-109,-127,55,-123,102,59,-87,-62,73,127,-127,127,115,127,-58,-73,-43,19,-62,-17,7,-52,59,-111,67,96,-90,117,-37,26,-77,-42,-116,75,91,127,98,127,-59,-127,-56,92,87,47,89,82,89, 12,-8,-89,100,-43,-1,52,-44,101,54,30,-58,35,69,-9,-39,-89,-31,9,-18,-43,44,-47,-1,-84,-46,0,-100,39,60,101,-38,-9,59,14,56,46,93,73,8,-13,114,122,42,19,26,-7,-113, 
  /* [0][1][][] */ -108,-105,-5,-84,-81,-54,127,-96,-127,-127,122,-38,60,44,-27,-63,127,-127,-42,-24,-62,116,0,19,-10,127,127,-48,-81,-56,11,-56,-68,-94,-127,43,24,89,41,-94,95,-32,41,92,85,96,120,-127, -71,-127,-123,-126,-55,127,112,-127,68,78,109,-71,66,127,55,-107,84,-101,-103,-127,-127,127,-119,127,-127,124,116,-127,-116,127,-3,-127,-127,-127,27,127,119,127,28,-127,110,-92,127,110,127,6,127,101, -38,-41,-91,127,100,-26,56,-35,30,59,-4,-15,22,80,60,-127,18,-17,-12,-68,-91,71,-127,-34,-126,93,8,-89,-61,46,127,-103,-29,55,65,46,69,69,4,-25,61,127,71,53,72,-35,8,37, 
  /* [0][2][][] */ -87,-43,20,32,-26,-33,15,-37,-9,-50,17,-10,10,14,-10,14,-83,-28,127,-21,28,-8,-18,-25,-25,30,67,6,38,61,-37,-1,-22,-108,-32,25,-12,11,-48,-32,42,-29,46,65,49,37,79,-70, -127,-88,-91,-81,98,45,12,-38,76,49,-82,-25,-3,15,-29,-89,79,6,74,-122,-5,21,-56,21,-106,95,38,-13,17,23,-40,16,-57,-29,-62,50,34,20,-78,-57,52,-52,58,127,51,-97,67,-24, -30,-89,-43,-43,4,15,8,-61,-73,44,-23,-18,-1,-4,18,-57,87,15,15,-76,-17,-50,-16,-45,-60,42,24,-51,6,-32,21,-32,-95,35,44,17,14,31,-17,-24,-4,73,26,59,65,14,25,35, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0036947703920304775, 0.0023660475853830576, 0.0078193182125687599, 0.00846062321215868, 0.018965573981404305, 0.0060494313947856426, 0.0035089864395558834, 0.0033479302655905485, 0.011829779483377934, 0.0031948685646057129, 0.002198303584009409, 0.0033853182103484869, 0.0045282309874892235, 0.0028501437045633793, 0.015977770090103149, 0.0031912359409034252, 0.0032555088400840759, 0.0093917585909366608, 0.0076269586570560932, 0.0037989220581948757, 0.0044657327234745026, 0.01140283141285181, 0.0067348196171224117, 0.011483190581202507, 0.0028024574276059866, 0.0048985383473336697, 0.0029135574586689472, 0.0035886380355805159, 0.0065502328798174858, 0.023105805739760399, 0.0086045302450656891, 0.0041055064648389816, 0.0042234095744788647, 0.0068918466567993164, 0.0071171494200825691, 0.002560820197686553, 0.0037102089263498783, 0.0010578358778730035, 0.0045185880735516548, 0.0027766143903136253, 0.0045855171047151089, 0.0056646643206477165, 0.0021679585333913565, 0.0041683558374643326, 0.0031644143164157867, 0.012106598354876041, 0.0028237192891538143, 0.016224369406700134, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 1119, -668, -306, 1604, 8052, 1262, -838, 8474, 3942, 863, -150, 3428, 1310, 482, -1634, 837, 2034, 6042, 1706, -596, 1238, -1735, -358, 5887, -331, -636, 2005, 51, 1759, 22092, 4540, 48, 400, -112, 1851, 57, 840, 35, 943, 1401, 793, 1596, 47, -599, 814, 1918, 1473, -778, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00044483330566436052, 0.00042346477857790887, 0.00033237718162126839, 0.00027925058384425938, 0.00011693617125274613, 0.00041705279727466404, 0.00038688592030666769, 0.00011974487279076129, 0.00018920036382041872, 0.00062093627639114857, 0.00039411586476489902, 0.00023265417257789522, 0.00020270982349757105, 0.00038286426570266485, 0.000213375169551, 0.00024424926959909499, 0.00026232941308990121, 0.0001324209151789546, 0.0002798082132358104, 0.0003646672994364053, 0.00037820899160578847, 0.00016481202328577638, 0.00037210551090538502, 0.00014801346696913242, 0.00036413135239854455, 0.00073567603249102831, 0.00029044834082014859, 0.0005883282283321023, 0.00030718452762812376, 4.553109101834707e-05, 0.00017468698206357658, 0.00053625187138095498, 0.00036881494452245533, 0.0003493890690151602, 0.0003477864374872297, 0.000346021493896842, 0.00027790138847194612, 0.00046037451829761267, 0.00035846044193021953, 0.00036350428126752377, 0.00037583100493066013, 0.00033613867708481848, 0.00032174188527278602, 0.00037684946437366307, 0.00037498454912565649, 0.0002689789398573339, 0.00022297336545307189, 0.00022288788750302047, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -26,43,-11,-8,-94,-42,-127,22, 
  /* [1][0][][] */ 86,-95,-60,-38,127,-90,75,61, 
  /* [2][0][][] */ -84,110,-37,-127,54,-17,-24,23, 
  /* [3][0][][] */ 23,22,93,-23,61,127,116,-29, 
  /* [4][0][][] */ -32,-127,35,5,-55,-66,33,-37, 
  /* [5][0][][] */ 127,2,51,54,-69,-5,8,-2, 
  /* [6][0][][] */ 13,21,127,-23,46,-23,-41,38, 
  /* [7][0][][] */ 16,11,-127,-46,-39,91,71,-78, 
  /* [8][0][][] */ 36,127,-53,14,15,118,74,55, 
  /* [9][0][][] */ 21,60,-52,122,-7,-72,34,127, 
  /* [10][0][][] */ 2,-127,9,-11,-56,-113,-53,-63, 
  /* [11][0][][] */ -127,-90,119,59,-33,-88,115,86, 
  /* [12][0][][] */ -25,39,-113,78,47,-81,-96,127, 
  /* [13][0][][] */ 79,-127,88,68,14,37,24,-55, 
  /* [14][0][][] */ -32,118,-51,-127,-35,-86,-10,-76, 
  /* [15][0][][] */ 30,126,21,-25,35,-47,96,-127, 
  /* [16][0][][] */ -126,-91,-36,127,-27,42,-30,81, 
  /* [17][0][][] */ -21,-78,-127,103,-63,72,-94,68, 
  /* [18][0][][] */ -35,-48,-8,64,16,104,10,127, 
  /* [19][0][][] */ 40,-109,121,-127,29,-51,7,-15, 
  /* [20][0][][] */ -2,66,14,22,21,127,50,-10, 
  /* [21][0][][] */ 30,110,28,-21,30,-36,90,-127, 
  /* [22][0][][] */ 25,-8,88,31,-11,127,29,-21, 
  /* [23][0][][] */ -127,-64,59,-67,118,111,-33,-122, 
  /* [24][0][][] */ -84,-84,12,-103,75,87,-67,-127, 
  /* [25][0][][] */ 127,13,-38,-10,16,29,-40,-17, 
  /* [26][0][][] */ -127,-40,-116,-44,-46,-40,-10,2, 
  /* [27][0][][] */ 82,34,14,-66,-127,-55,93,92, 
  /* [28][0][][] */ -94,-111,-1,58,-69,-127,12,15, 
  /* [29][0][][] */ 127,113,33,-104,27,-15,-31,-112, 
  /* [30][0][][] */ -125,-53,72,-74,105,89,-43,-127, 
  /* [31][0][][] */ 65,57,-2,127,13,-96,29,-2, 
  /* [32][0][][] */ -39,127,13,32,51,94,-16,75, 
  /* [33][0][][] */ -27,127,-58,9,31,-68,-10,-1, 
  /* [34][0][][] */ -127,-55,-74,71,11,-12,9,87, 
  /* [35][0][][] */ -68,127,-18,-13,93,125,67,75, 
  /* [36][0][][] */ 91,49,12,-37,-93,-35,127,77, 
  /* [37][0][][] */ -44,127,49,17,-119,91,-21,-115, 
  /* [38][0][][] */ 27,43,67,5,127,76,88,51, 
  /* [39][0][][] */ -24,-67,29,-7,3,31,-86,127, 
  /* [40][0][][] */ -97,-62,-23,127,14,-4,18,65, 
  /* [41][0][][] */ 127,-1,60,95,-38,-4,14,-15, 
  /* [42][0][][] */ -35,18,-101,-103,43,-127,12,86, 
  /* [43][0][][] */ 34,2,67,11,26,127,88,7, 
  /* [44][0][][] */ -21,-9,-64,127,43,13,-21,-35, 
  /* [45][0][][] */ 33,121,99,-127,36,-50,-9,-50, 
  /* [46][0][][] */ -32,-127,-40,45,-10,60,-62,105, 
  /* [47][0][][] */ 7,55,127,-30,113,127,112,9, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0051259426400065422, 0.0048797070048749447, 0.0038300782907754183, 0.0032178852707147598, 0.0013474893057718873, 0.0048058200627565384, 0.0044581983238458633, 0.0013798547443002462, 0.0021802105475217104, 0.0071552279405295849, 0.0045415111817419529, 0.0026809412520378828, 0.0023358839098364115, 0.0044118557125329971, 0.0024587837979197502, 0.002814555075019598, 0.0030228977557271719, 0.0015259244246408343, 0.0032243109308183193, 0.0042021665722131729, 0.0043582115322351456, 0.0018991765100508928, 0.0042878794483840466, 0.0017056019278243184, 0.0041959909722208977, 0.0084774075075984001, 0.003346920246258378, 0.0067794760689139366, 0.0035397759638726711, 0.00052466790657490492, 0.0020129685290157795, 0.0061793853528797626, 0.0042499611154198647, 0.0040261112153530121, 0.0040076435543596745, 0.0039873057976365089, 0.0032023380044847727, 0.0053050285205245018, 0.0041306433267891407, 0.0041887648403644562, 0.0043308092281222343, 0.0038734229747205973, 0.0037075248546898365, 0.0043425452895462513, 0.0043210554867982864, 0.0030995220877230167, 0.0025693865027278662, 0.0025684016291052103, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -6542, -3398, 14468, -9693, 24485, 6115, -8165, 9664, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00019577959028538316, 0.0002357238408876583, 0.00015728089783806354, 0.0002529013145249337, 0.00010387811926193535, 0.00016903207870200276, 0.00017282410408370197, 0.00026956506189890206, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 3,-18,-24,-62,-44,-41,18,-31,42,7,-35,-7,98,127,-22,-108, 
  /* [1][0][][] */ 127,-56,-49,11,-54,64,-62,-42,-45,76,-44,-50,-5,8,-69,-28, 
  /* [2][0][][] */ -48,-97,52,32,63,-65,-88,-24,26,-98,25,-127,45,-26,-64,38, 
  /* [3][0][][] */ 40,19,19,6,-7,61,-46,-34,127,46,9,10,12,-5,6,38, 
  /* [4][0][][] */ -75,-28,-7,-127,5,37,37,-121,18,-35,-34,-38,-117,16,-30,-6, 
  /* [5][0][][] */ 107,43,63,-23,27,-54,-125,-127,-9,-86,67,41,-55,49,55,-62, 
  /* [6][0][][] */ 101,40,-127,-62,11,-84,0,-78,-49,21,-122,102,84,-80,14,48, 
  /* [7][0][][] */ -127,-3,85,-30,-50,3,8,-50,-31,51,54,-32,65,-25,23,47, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0083206323906779289, 0.010018263012170792, 0.0066844378598034382, 0.010748305357992649, 0.0044148201122879982, 0.007183863315731287, 0.0073450244963169098, 0.011456514708697796, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { 29681, 97, -1035, 2842, -1915, 922, 12784, -165, 1177, -199, -3629, 2843, 9013, 122, -413, -976, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 9.0437759354244918e-05, 0.00019808068464044482, 0.00017814527382142842, 0.00019148111459799111, 0.00089720840333029628, 0.00072089897003024817, 0.00017891188326757401, 0.00070902251172810793, 0.0002693752758204937, 0.0013446422526612878, 0.000174120650626719, 0.00015739802620373666, 7.1988812123890966e-05, 0.00011271696712356061, 0.00018457885016687214, 0.0007763345493003726, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -25,2,13,9,-17,12,0,21,-20,-10,2,-2,6,1,12,2, -24,-14,10,7,14,-3,9,-21,1,10,-7,127,-14,28,-3,4, -26,-10,2,3,-1,-15,-3,14,-5,4,7,-10,15,4,-8,-1, 
  /* [0][1][][] */ 6,-13,13,14,127,-25,-127,-14,127,127,10,3,127,-19,-5,-20, -127,127,127,1,-79,-94,-32,-92,31,-103,127,124,99,127,127,127, 15,-13,-1,-2,-9,127,-8,-5,-17,-11,-3,1,12,0,-11,-10, 
  /* [0][2][][] */ -5,-17,-5,-3,-10,15,39,13,-28,-7,25,-13,-4,4,-4,-12, 14,-28,-12,-127,12,-18,-32,127,-10,2,9,-18,-18,-54,-19,-38, -7,1,-4,-8,2,-7,-11,3,-15,3,3,-6,3,-4,-11,-14, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0038436048198491335, 0.0084184287115931511, 0.0075711742974817753, 0.0081379469484090805, 0.038131356239318848, 0.030638206750154495, 0.0076037547551095486, 0.030133455991744995, 0.011448448523879051, 0.057147294282913208, 0.0074001275934278965, 0.0066894162446260452, 0.0030595245771110058, 0.0047904709354043007, 0.0078446008265018463, 0.032994218170642853, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { 5330, -22, 2301, 5928, 89755, 44107, 5839, 19260, 4274, 16216, 2722, -789, 3139, -1601, -705, 41129, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00019357644487172365, 0.00083328725304454565, 0.00029485247796401381, 0.00015635193267371505, 1.5541651009698398e-05, 3.2424890378024429e-05, 7.84787189331837e-05, 1.3153148756828159e-05, 0.00018740522500593215, 2.8712160201393999e-05, 0.00043949845712631941, 0.00068800797453150153, 0.00019173324108123779, 1.0438073331897613e-05, 0.00063459045486524701, 2.7307176424073987e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -94, -119, -35, 
  /* [0][1][][] */ 65, -42, 13, 
  /* [0][2][][] */ 29, 127, 16, 
  /* [1][0][][] */ 106, -94, -11, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -13, 
  /* [2][0][][] */ -26, -5, -51, 
  /* [2][1][][] */ 34, 94, 127, 
  /* [2][2][][] */ -15, -98, -83, 
  /* [3][0][][] */ 112, 117, 52, 
  /* [3][1][][] */ -3, -25, -18, 
  /* [3][2][][] */ -102, -127, -46, 
  /* [4][0][][] */ 10, -71, -5, 
  /* [4][1][][] */ 15, -127, -11, 
  /* [4][2][][] */ 9, -74, -16, 
  /* [5][0][][] */ -64, 20, 30, 
  /* [5][1][][] */ -127, 19, 28, 
  /* [5][2][][] */ -83, 18, 17, 
  /* [6][0][][] */ -9, 79, 127, 
  /* [6][1][][] */ -42, 58, -9, 
  /* [6][2][][] */ -27, -42, -78, 
  /* [7][0][][] */ 47, 37, -5, 
  /* [7][1][][] */ 127, 75, 6, 
  /* [7][2][][] */ 73, 54, 22, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -54, -86, 127, 
  /* [8][2][][] */ -27, -61, 96, 
  /* [9][0][][] */ -29, 67, -16, 
  /* [9][1][][] */ -32, 127, -10, 
  /* [9][2][][] */ -30, 80, -5, 
  /* [10][0][][] */ 22, 84, 10, 
  /* [10][1][][] */ -38, -127, -31, 
  /* [10][2][][] */ 10, 37, 16, 
  /* [11][0][][] */ 8, -18, 10, 
  /* [11][1][][] */ 65, -92, 36, 
  /* [11][2][][] */ -83, 127, -45, 
  /* [12][0][][] */ -38, 56, -5, 
  /* [12][1][][] */ -127, 125, 12, 
  /* [12][2][][] */ -77, 88, 11, 
  /* [13][0][][] */ 127, 61, 31, 
  /* [13][1][][] */ 115, 55, 18, 
  /* [13][2][][] */ 92, 106, 88, 
  /* [14][0][][] */ -30, -27, 49, 
  /* [14][1][][] */ 45, 100, -127, 
  /* [14][2][][] */ -15, -70, 82, 
  /* [15][0][][] */ -75, -64, -1, 
  /* [15][1][][] */ -120, -127, 19, 
  /* [15][2][][] */ -15, -82, -4, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.049508579075336456, 0.2131192535161972, 0.075410656630992889, 0.039988141506910324, 0.0039748898707330227, 0.0082929003983736038, 0.020071500912308693, 0.0033640130423009396, 0.047930244356393814, 0.0073433429934084415, 0.11240492016077042, 0.17596302926540375, 0.049037165939807892, 0.0026696128770709038, 0.16230110824108124, 0.0069840084761381149, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.08678077906370163, } };
const TfArray<1, int> quant46_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.059250343590974808, } };
const TfArray<1, int> quant50_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.054911050945520401, } };
const TfArray<1, int> quant53_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.086984813213348389, } };
const TfArray<1, int> quant54_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.044370409101247787, } };
const TfArray<1, int> quant58_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.022188097238540649, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.04581010714173317, } };
const TfArray<1, int> quant61_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.067023351788520813, } };
const TfArray<1, int> quant62_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.020354434847831726, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.037053622305393219, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.0700187087059021, } };
const TfArray<1, int> quant66_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.018212717026472092, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.051051031798124313, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant69_scale = { 1, { 0.20828908681869507, } };
const TfArray<1, int> quant69_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,4 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 576), (TfLiteIntArray*)&g0::tensor_dimension69, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 576, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
